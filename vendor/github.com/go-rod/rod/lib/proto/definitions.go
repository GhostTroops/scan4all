// This file is generated by "./lib/proto/generate"

package proto

import (
	"reflect"
)

// Version of cdp protocol
const Version = "v1.3"

var types = map[string]reflect.Type{

	"Accessibility.AXValueSource":                      reflect.TypeOf(AccessibilityAXValueSource{}),
	"Accessibility.AXRelatedNode":                      reflect.TypeOf(AccessibilityAXRelatedNode{}),
	"Accessibility.AXProperty":                         reflect.TypeOf(AccessibilityAXProperty{}),
	"Accessibility.AXValue":                            reflect.TypeOf(AccessibilityAXValue{}),
	"Accessibility.AXNode":                             reflect.TypeOf(AccessibilityAXNode{}),
	"Accessibility.disable":                            reflect.TypeOf(AccessibilityDisable{}),
	"Accessibility.enable":                             reflect.TypeOf(AccessibilityEnable{}),
	"Accessibility.getPartialAXTree":                   reflect.TypeOf(AccessibilityGetPartialAXTree{}),
	"Accessibility.getPartialAXTreeResult":             reflect.TypeOf(AccessibilityGetPartialAXTreeResult{}),
	"Accessibility.getFullAXTree":                      reflect.TypeOf(AccessibilityGetFullAXTree{}),
	"Accessibility.getFullAXTreeResult":                reflect.TypeOf(AccessibilityGetFullAXTreeResult{}),
	"Accessibility.getRootAXNode":                      reflect.TypeOf(AccessibilityGetRootAXNode{}),
	"Accessibility.getRootAXNodeResult":                reflect.TypeOf(AccessibilityGetRootAXNodeResult{}),
	"Accessibility.getAXNodeAndAncestors":              reflect.TypeOf(AccessibilityGetAXNodeAndAncestors{}),
	"Accessibility.getAXNodeAndAncestorsResult":        reflect.TypeOf(AccessibilityGetAXNodeAndAncestorsResult{}),
	"Accessibility.getChildAXNodes":                    reflect.TypeOf(AccessibilityGetChildAXNodes{}),
	"Accessibility.getChildAXNodesResult":              reflect.TypeOf(AccessibilityGetChildAXNodesResult{}),
	"Accessibility.queryAXTree":                        reflect.TypeOf(AccessibilityQueryAXTree{}),
	"Accessibility.queryAXTreeResult":                  reflect.TypeOf(AccessibilityQueryAXTreeResult{}),
	"Accessibility.loadComplete":                       reflect.TypeOf(AccessibilityLoadComplete{}),
	"Accessibility.nodesUpdated":                       reflect.TypeOf(AccessibilityNodesUpdated{}),
	"Animation.Animation":                              reflect.TypeOf(AnimationAnimation{}),
	"Animation.AnimationEffect":                        reflect.TypeOf(AnimationAnimationEffect{}),
	"Animation.KeyframesRule":                          reflect.TypeOf(AnimationKeyframesRule{}),
	"Animation.KeyframeStyle":                          reflect.TypeOf(AnimationKeyframeStyle{}),
	"Animation.disable":                                reflect.TypeOf(AnimationDisable{}),
	"Animation.enable":                                 reflect.TypeOf(AnimationEnable{}),
	"Animation.getCurrentTime":                         reflect.TypeOf(AnimationGetCurrentTime{}),
	"Animation.getCurrentTimeResult":                   reflect.TypeOf(AnimationGetCurrentTimeResult{}),
	"Animation.getPlaybackRate":                        reflect.TypeOf(AnimationGetPlaybackRate{}),
	"Animation.getPlaybackRateResult":                  reflect.TypeOf(AnimationGetPlaybackRateResult{}),
	"Animation.releaseAnimations":                      reflect.TypeOf(AnimationReleaseAnimations{}),
	"Animation.resolveAnimation":                       reflect.TypeOf(AnimationResolveAnimation{}),
	"Animation.resolveAnimationResult":                 reflect.TypeOf(AnimationResolveAnimationResult{}),
	"Animation.seekAnimations":                         reflect.TypeOf(AnimationSeekAnimations{}),
	"Animation.setPaused":                              reflect.TypeOf(AnimationSetPaused{}),
	"Animation.setPlaybackRate":                        reflect.TypeOf(AnimationSetPlaybackRate{}),
	"Animation.setTiming":                              reflect.TypeOf(AnimationSetTiming{}),
	"Animation.animationCanceled":                      reflect.TypeOf(AnimationAnimationCanceled{}),
	"Animation.animationCreated":                       reflect.TypeOf(AnimationAnimationCreated{}),
	"Animation.animationStarted":                       reflect.TypeOf(AnimationAnimationStarted{}),
	"Audits.AffectedCookie":                            reflect.TypeOf(AuditsAffectedCookie{}),
	"Audits.AffectedRequest":                           reflect.TypeOf(AuditsAffectedRequest{}),
	"Audits.AffectedFrame":                             reflect.TypeOf(AuditsAffectedFrame{}),
	"Audits.CookieIssueDetails":                        reflect.TypeOf(AuditsCookieIssueDetails{}),
	"Audits.MixedContentIssueDetails":                  reflect.TypeOf(AuditsMixedContentIssueDetails{}),
	"Audits.BlockedByResponseIssueDetails":             reflect.TypeOf(AuditsBlockedByResponseIssueDetails{}),
	"Audits.HeavyAdIssueDetails":                       reflect.TypeOf(AuditsHeavyAdIssueDetails{}),
	"Audits.SourceCodeLocation":                        reflect.TypeOf(AuditsSourceCodeLocation{}),
	"Audits.ContentSecurityPolicyIssueDetails":         reflect.TypeOf(AuditsContentSecurityPolicyIssueDetails{}),
	"Audits.SharedArrayBufferIssueDetails":             reflect.TypeOf(AuditsSharedArrayBufferIssueDetails{}),
	"Audits.TrustedWebActivityIssueDetails":            reflect.TypeOf(AuditsTrustedWebActivityIssueDetails{}),
	"Audits.LowTextContrastIssueDetails":               reflect.TypeOf(AuditsLowTextContrastIssueDetails{}),
	"Audits.CorsIssueDetails":                          reflect.TypeOf(AuditsCorsIssueDetails{}),
	"Audits.AttributionReportingIssueDetails":          reflect.TypeOf(AuditsAttributionReportingIssueDetails{}),
	"Audits.QuirksModeIssueDetails":                    reflect.TypeOf(AuditsQuirksModeIssueDetails{}),
	"Audits.NavigatorUserAgentIssueDetails":            reflect.TypeOf(AuditsNavigatorUserAgentIssueDetails{}),
	"Audits.GenericIssueDetails":                       reflect.TypeOf(AuditsGenericIssueDetails{}),
	"Audits.DeprecationIssueDetails":                   reflect.TypeOf(AuditsDeprecationIssueDetails{}),
	"Audits.FederatedAuthRequestIssueDetails":          reflect.TypeOf(AuditsFederatedAuthRequestIssueDetails{}),
	"Audits.ClientHintIssueDetails":                    reflect.TypeOf(AuditsClientHintIssueDetails{}),
	"Audits.InspectorIssueDetails":                     reflect.TypeOf(AuditsInspectorIssueDetails{}),
	"Audits.InspectorIssue":                            reflect.TypeOf(AuditsInspectorIssue{}),
	"Audits.getEncodedResponse":                        reflect.TypeOf(AuditsGetEncodedResponse{}),
	"Audits.getEncodedResponseResult":                  reflect.TypeOf(AuditsGetEncodedResponseResult{}),
	"Audits.disable":                                   reflect.TypeOf(AuditsDisable{}),
	"Audits.enable":                                    reflect.TypeOf(AuditsEnable{}),
	"Audits.checkContrast":                             reflect.TypeOf(AuditsCheckContrast{}),
	"Audits.issueAdded":                                reflect.TypeOf(AuditsIssueAdded{}),
	"BackgroundService.EventMetadata":                  reflect.TypeOf(BackgroundServiceEventMetadata{}),
	"BackgroundService.BackgroundServiceEvent":         reflect.TypeOf(BackgroundServiceBackgroundServiceEvent{}),
	"BackgroundService.startObserving":                 reflect.TypeOf(BackgroundServiceStartObserving{}),
	"BackgroundService.stopObserving":                  reflect.TypeOf(BackgroundServiceStopObserving{}),
	"BackgroundService.setRecording":                   reflect.TypeOf(BackgroundServiceSetRecording{}),
	"BackgroundService.clearEvents":                    reflect.TypeOf(BackgroundServiceClearEvents{}),
	"BackgroundService.recordingStateChanged":          reflect.TypeOf(BackgroundServiceRecordingStateChanged{}),
	"BackgroundService.backgroundServiceEventReceived": reflect.TypeOf(BackgroundServiceBackgroundServiceEventReceived{}),
	"Browser.Bounds":                                   reflect.TypeOf(BrowserBounds{}),
	"Browser.PermissionDescriptor":                     reflect.TypeOf(BrowserPermissionDescriptor{}),
	"Browser.Bucket":                                   reflect.TypeOf(BrowserBucket{}),
	"Browser.Histogram":                                reflect.TypeOf(BrowserHistogram{}),
	"Browser.setPermission":                            reflect.TypeOf(BrowserSetPermission{}),
	"Browser.grantPermissions":                         reflect.TypeOf(BrowserGrantPermissions{}),
	"Browser.resetPermissions":                         reflect.TypeOf(BrowserResetPermissions{}),
	"Browser.setDownloadBehavior":                      reflect.TypeOf(BrowserSetDownloadBehavior{}),
	"Browser.cancelDownload":                           reflect.TypeOf(BrowserCancelDownload{}),
	"Browser.close":                                    reflect.TypeOf(BrowserClose{}),
	"Browser.crash":                                    reflect.TypeOf(BrowserCrash{}),
	"Browser.crashGpuProcess":                          reflect.TypeOf(BrowserCrashGpuProcess{}),
	"Browser.getVersion":                               reflect.TypeOf(BrowserGetVersion{}),
	"Browser.getVersionResult":                         reflect.TypeOf(BrowserGetVersionResult{}),
	"Browser.getBrowserCommandLine":                    reflect.TypeOf(BrowserGetBrowserCommandLine{}),
	"Browser.getBrowserCommandLineResult":              reflect.TypeOf(BrowserGetBrowserCommandLineResult{}),
	"Browser.getHistograms":                            reflect.TypeOf(BrowserGetHistograms{}),
	"Browser.getHistogramsResult":                      reflect.TypeOf(BrowserGetHistogramsResult{}),
	"Browser.getHistogram":                             reflect.TypeOf(BrowserGetHistogram{}),
	"Browser.getHistogramResult":                       reflect.TypeOf(BrowserGetHistogramResult{}),
	"Browser.getWindowBounds":                          reflect.TypeOf(BrowserGetWindowBounds{}),
	"Browser.getWindowBoundsResult":                    reflect.TypeOf(BrowserGetWindowBoundsResult{}),
	"Browser.getWindowForTarget":                       reflect.TypeOf(BrowserGetWindowForTarget{}),
	"Browser.getWindowForTargetResult":                 reflect.TypeOf(BrowserGetWindowForTargetResult{}),
	"Browser.setWindowBounds":                          reflect.TypeOf(BrowserSetWindowBounds{}),
	"Browser.setDockTile":                              reflect.TypeOf(BrowserSetDockTile{}),
	"Browser.executeBrowserCommand":                    reflect.TypeOf(BrowserExecuteBrowserCommand{}),
	"Browser.downloadWillBegin":                        reflect.TypeOf(BrowserDownloadWillBegin{}),
	"Browser.downloadProgress":                         reflect.TypeOf(BrowserDownloadProgress{}),
	"CSS.PseudoElementMatches":                         reflect.TypeOf(CSSPseudoElementMatches{}),
	"CSS.InheritedStyleEntry":                          reflect.TypeOf(CSSInheritedStyleEntry{}),
	"CSS.InheritedPseudoElementMatches":                reflect.TypeOf(CSSInheritedPseudoElementMatches{}),
	"CSS.RuleMatch":                                    reflect.TypeOf(CSSRuleMatch{}),
	"CSS.Value":                                        reflect.TypeOf(CSSValue{}),
	"CSS.SelectorList":                                 reflect.TypeOf(CSSSelectorList{}),
	"CSS.CSSStyleSheetHeader":                          reflect.TypeOf(CSSCSSStyleSheetHeader{}),
	"CSS.CSSRule":                                      reflect.TypeOf(CSSCSSRule{}),
	"CSS.RuleUsage":                                    reflect.TypeOf(CSSRuleUsage{}),
	"CSS.SourceRange":                                  reflect.TypeOf(CSSSourceRange{}),
	"CSS.ShorthandEntry":                               reflect.TypeOf(CSSShorthandEntry{}),
	"CSS.CSSComputedStyleProperty":                     reflect.TypeOf(CSSCSSComputedStyleProperty{}),
	"CSS.CSSStyle":                                     reflect.TypeOf(CSSCSSStyle{}),
	"CSS.CSSProperty":                                  reflect.TypeOf(CSSCSSProperty{}),
	"CSS.CSSMedia":                                     reflect.TypeOf(CSSCSSMedia{}),
	"CSS.MediaQuery":                                   reflect.TypeOf(CSSMediaQuery{}),
	"CSS.MediaQueryExpression":                         reflect.TypeOf(CSSMediaQueryExpression{}),
	"CSS.CSSContainerQuery":                            reflect.TypeOf(CSSCSSContainerQuery{}),
	"CSS.CSSSupports":                                  reflect.TypeOf(CSSCSSSupports{}),
	"CSS.CSSScope":                                     reflect.TypeOf(CSSCSSScope{}),
	"CSS.CSSLayer":                                     reflect.TypeOf(CSSCSSLayer{}),
	"CSS.CSSLayerData":                                 reflect.TypeOf(CSSCSSLayerData{}),
	"CSS.PlatformFontUsage":                            reflect.TypeOf(CSSPlatformFontUsage{}),
	"CSS.FontVariationAxis":                            reflect.TypeOf(CSSFontVariationAxis{}),
	"CSS.FontFace":                                     reflect.TypeOf(CSSFontFace{}),
	"CSS.CSSKeyframesRule":                             reflect.TypeOf(CSSCSSKeyframesRule{}),
	"CSS.CSSKeyframeRule":                              reflect.TypeOf(CSSCSSKeyframeRule{}),
	"CSS.StyleDeclarationEdit":                         reflect.TypeOf(CSSStyleDeclarationEdit{}),
	"CSS.addRule":                                      reflect.TypeOf(CSSAddRule{}),
	"CSS.addRuleResult":                                reflect.TypeOf(CSSAddRuleResult{}),
	"CSS.collectClassNames":                            reflect.TypeOf(CSSCollectClassNames{}),
	"CSS.collectClassNamesResult":                      reflect.TypeOf(CSSCollectClassNamesResult{}),
	"CSS.createStyleSheet":                             reflect.TypeOf(CSSCreateStyleSheet{}),
	"CSS.createStyleSheetResult":                       reflect.TypeOf(CSSCreateStyleSheetResult{}),
	"CSS.disable":                                      reflect.TypeOf(CSSDisable{}),
	"CSS.enable":                                       reflect.TypeOf(CSSEnable{}),
	"CSS.forcePseudoState":                             reflect.TypeOf(CSSForcePseudoState{}),
	"CSS.getBackgroundColors":                          reflect.TypeOf(CSSGetBackgroundColors{}),
	"CSS.getBackgroundColorsResult":                    reflect.TypeOf(CSSGetBackgroundColorsResult{}),
	"CSS.getComputedStyleForNode":                      reflect.TypeOf(CSSGetComputedStyleForNode{}),
	"CSS.getComputedStyleForNodeResult":                reflect.TypeOf(CSSGetComputedStyleForNodeResult{}),
	"CSS.getInlineStylesForNode":                       reflect.TypeOf(CSSGetInlineStylesForNode{}),
	"CSS.getInlineStylesForNodeResult":                 reflect.TypeOf(CSSGetInlineStylesForNodeResult{}),
	"CSS.getMatchedStylesForNode":                      reflect.TypeOf(CSSGetMatchedStylesForNode{}),
	"CSS.getMatchedStylesForNodeResult":                reflect.TypeOf(CSSGetMatchedStylesForNodeResult{}),
	"CSS.getMediaQueries":                              reflect.TypeOf(CSSGetMediaQueries{}),
	"CSS.getMediaQueriesResult":                        reflect.TypeOf(CSSGetMediaQueriesResult{}),
	"CSS.getPlatformFontsForNode":                      reflect.TypeOf(CSSGetPlatformFontsForNode{}),
	"CSS.getPlatformFontsForNodeResult":                reflect.TypeOf(CSSGetPlatformFontsForNodeResult{}),
	"CSS.getStyleSheetText":                            reflect.TypeOf(CSSGetStyleSheetText{}),
	"CSS.getStyleSheetTextResult":                      reflect.TypeOf(CSSGetStyleSheetTextResult{}),
	"CSS.getLayersForNode":                             reflect.TypeOf(CSSGetLayersForNode{}),
	"CSS.getLayersForNodeResult":                       reflect.TypeOf(CSSGetLayersForNodeResult{}),
	"CSS.trackComputedStyleUpdates":                    reflect.TypeOf(CSSTrackComputedStyleUpdates{}),
	"CSS.takeComputedStyleUpdates":                     reflect.TypeOf(CSSTakeComputedStyleUpdates{}),
	"CSS.takeComputedStyleUpdatesResult":               reflect.TypeOf(CSSTakeComputedStyleUpdatesResult{}),
	"CSS.setEffectivePropertyValueForNode":             reflect.TypeOf(CSSSetEffectivePropertyValueForNode{}),
	"CSS.setKeyframeKey":                               reflect.TypeOf(CSSSetKeyframeKey{}),
	"CSS.setKeyframeKeyResult":                         reflect.TypeOf(CSSSetKeyframeKeyResult{}),
	"CSS.setMediaText":                                 reflect.TypeOf(CSSSetMediaText{}),
	"CSS.setMediaTextResult":                           reflect.TypeOf(CSSSetMediaTextResult{}),
	"CSS.setContainerQueryText":                        reflect.TypeOf(CSSSetContainerQueryText{}),
	"CSS.setContainerQueryTextResult":                  reflect.TypeOf(CSSSetContainerQueryTextResult{}),
	"CSS.setSupportsText":                              reflect.TypeOf(CSSSetSupportsText{}),
	"CSS.setSupportsTextResult":                        reflect.TypeOf(CSSSetSupportsTextResult{}),
	"CSS.setScopeText":                                 reflect.TypeOf(CSSSetScopeText{}),
	"CSS.setScopeTextResult":                           reflect.TypeOf(CSSSetScopeTextResult{}),
	"CSS.setRuleSelector":                              reflect.TypeOf(CSSSetRuleSelector{}),
	"CSS.setRuleSelectorResult":                        reflect.TypeOf(CSSSetRuleSelectorResult{}),
	"CSS.setStyleSheetText":                            reflect.TypeOf(CSSSetStyleSheetText{}),
	"CSS.setStyleSheetTextResult":                      reflect.TypeOf(CSSSetStyleSheetTextResult{}),
	"CSS.setStyleTexts":                                reflect.TypeOf(CSSSetStyleTexts{}),
	"CSS.setStyleTextsResult":                          reflect.TypeOf(CSSSetStyleTextsResult{}),
	"CSS.startRuleUsageTracking":                       reflect.TypeOf(CSSStartRuleUsageTracking{}),
	"CSS.stopRuleUsageTracking":                        reflect.TypeOf(CSSStopRuleUsageTracking{}),
	"CSS.stopRuleUsageTrackingResult":                  reflect.TypeOf(CSSStopRuleUsageTrackingResult{}),
	"CSS.takeCoverageDelta":                            reflect.TypeOf(CSSTakeCoverageDelta{}),
	"CSS.takeCoverageDeltaResult":                      reflect.TypeOf(CSSTakeCoverageDeltaResult{}),
	"CSS.setLocalFontsEnabled":                         reflect.TypeOf(CSSSetLocalFontsEnabled{}),
	"CSS.fontsUpdated":                                 reflect.TypeOf(CSSFontsUpdated{}),
	"CSS.mediaQueryResultChanged":                      reflect.TypeOf(CSSMediaQueryResultChanged{}),
	"CSS.styleSheetAdded":                              reflect.TypeOf(CSSStyleSheetAdded{}),
	"CSS.styleSheetChanged":                            reflect.TypeOf(CSSStyleSheetChanged{}),
	"CSS.styleSheetRemoved":                            reflect.TypeOf(CSSStyleSheetRemoved{}),
	"CacheStorage.DataEntry":                           reflect.TypeOf(CacheStorageDataEntry{}),
	"CacheStorage.Cache":                               reflect.TypeOf(CacheStorageCache{}),
	"CacheStorage.Header":                              reflect.TypeOf(CacheStorageHeader{}),
	"CacheStorage.CachedResponse":                      reflect.TypeOf(CacheStorageCachedResponse{}),
	"CacheStorage.deleteCache":                         reflect.TypeOf(CacheStorageDeleteCache{}),
	"CacheStorage.deleteEntry":                         reflect.TypeOf(CacheStorageDeleteEntry{}),
	"CacheStorage.requestCacheNames":                   reflect.TypeOf(CacheStorageRequestCacheNames{}),
	"CacheStorage.requestCacheNamesResult":             reflect.TypeOf(CacheStorageRequestCacheNamesResult{}),
	"CacheStorage.requestCachedResponse":               reflect.TypeOf(CacheStorageRequestCachedResponse{}),
	"CacheStorage.requestCachedResponseResult":         reflect.TypeOf(CacheStorageRequestCachedResponseResult{}),
	"CacheStorage.requestEntries":                      reflect.TypeOf(CacheStorageRequestEntries{}),
	"CacheStorage.requestEntriesResult":                reflect.TypeOf(CacheStorageRequestEntriesResult{}),
	"Cast.Sink":                                        reflect.TypeOf(CastSink{}),
	"Cast.enable":                                      reflect.TypeOf(CastEnable{}),
	"Cast.disable":                                     reflect.TypeOf(CastDisable{}),
	"Cast.setSinkToUse":                                reflect.TypeOf(CastSetSinkToUse{}),
	"Cast.startDesktopMirroring":                       reflect.TypeOf(CastStartDesktopMirroring{}),
	"Cast.startTabMirroring":                           reflect.TypeOf(CastStartTabMirroring{}),
	"Cast.stopCasting":                                 reflect.TypeOf(CastStopCasting{}),
	"Cast.sinksUpdated":                                reflect.TypeOf(CastSinksUpdated{}),
	"Cast.issueUpdated":                                reflect.TypeOf(CastIssueUpdated{}),
	"DOM.BackendNode":                                  reflect.TypeOf(DOMBackendNode{}),
	"DOM.Node":                                         reflect.TypeOf(DOMNode{}),
	"DOM.RGBA":                                         reflect.TypeOf(DOMRGBA{}),
	"DOM.BoxModel":                                     reflect.TypeOf(DOMBoxModel{}),
	"DOM.ShapeOutsideInfo":                             reflect.TypeOf(DOMShapeOutsideInfo{}),
	"DOM.Rect":                                         reflect.TypeOf(DOMRect{}),
	"DOM.CSSComputedStyleProperty":                     reflect.TypeOf(DOMCSSComputedStyleProperty{}),
	"DOM.collectClassNamesFromSubtree":                 reflect.TypeOf(DOMCollectClassNamesFromSubtree{}),
	"DOM.collectClassNamesFromSubtreeResult":           reflect.TypeOf(DOMCollectClassNamesFromSubtreeResult{}),
	"DOM.copyTo":                                       reflect.TypeOf(DOMCopyTo{}),
	"DOM.copyToResult":                                 reflect.TypeOf(DOMCopyToResult{}),
	"DOM.describeNode":                                 reflect.TypeOf(DOMDescribeNode{}),
	"DOM.describeNodeResult":                           reflect.TypeOf(DOMDescribeNodeResult{}),
	"DOM.scrollIntoViewIfNeeded":                       reflect.TypeOf(DOMScrollIntoViewIfNeeded{}),
	"DOM.disable":                                      reflect.TypeOf(DOMDisable{}),
	"DOM.discardSearchResults":                         reflect.TypeOf(DOMDiscardSearchResults{}),
	"DOM.enable":                                       reflect.TypeOf(DOMEnable{}),
	"DOM.focus":                                        reflect.TypeOf(DOMFocus{}),
	"DOM.getAttributes":                                reflect.TypeOf(DOMGetAttributes{}),
	"DOM.getAttributesResult":                          reflect.TypeOf(DOMGetAttributesResult{}),
	"DOM.getBoxModel":                                  reflect.TypeOf(DOMGetBoxModel{}),
	"DOM.getBoxModelResult":                            reflect.TypeOf(DOMGetBoxModelResult{}),
	"DOM.getContentQuads":                              reflect.TypeOf(DOMGetContentQuads{}),
	"DOM.getContentQuadsResult":                        reflect.TypeOf(DOMGetContentQuadsResult{}),
	"DOM.getDocument":                                  reflect.TypeOf(DOMGetDocument{}),
	"DOM.getDocumentResult":                            reflect.TypeOf(DOMGetDocumentResult{}),
	"DOM.getFlattenedDocument":                         reflect.TypeOf(DOMGetFlattenedDocument{}),
	"DOM.getFlattenedDocumentResult":                   reflect.TypeOf(DOMGetFlattenedDocumentResult{}),
	"DOM.getNodesForSubtreeByStyle":                    reflect.TypeOf(DOMGetNodesForSubtreeByStyle{}),
	"DOM.getNodesForSubtreeByStyleResult":              reflect.TypeOf(DOMGetNodesForSubtreeByStyleResult{}),
	"DOM.getNodeForLocation":                           reflect.TypeOf(DOMGetNodeForLocation{}),
	"DOM.getNodeForLocationResult":                     reflect.TypeOf(DOMGetNodeForLocationResult{}),
	"DOM.getOuterHTML":                                 reflect.TypeOf(DOMGetOuterHTML{}),
	"DOM.getOuterHTMLResult":                           reflect.TypeOf(DOMGetOuterHTMLResult{}),
	"DOM.getRelayoutBoundary":                          reflect.TypeOf(DOMGetRelayoutBoundary{}),
	"DOM.getRelayoutBoundaryResult":                    reflect.TypeOf(DOMGetRelayoutBoundaryResult{}),
	"DOM.getSearchResults":                             reflect.TypeOf(DOMGetSearchResults{}),
	"DOM.getSearchResultsResult":                       reflect.TypeOf(DOMGetSearchResultsResult{}),
	"DOM.hideHighlight":                                reflect.TypeOf(DOMHideHighlight{}),
	"DOM.highlightNode":                                reflect.TypeOf(DOMHighlightNode{}),
	"DOM.highlightRect":                                reflect.TypeOf(DOMHighlightRect{}),
	"DOM.markUndoableState":                            reflect.TypeOf(DOMMarkUndoableState{}),
	"DOM.moveTo":                                       reflect.TypeOf(DOMMoveTo{}),
	"DOM.moveToResult":                                 reflect.TypeOf(DOMMoveToResult{}),
	"DOM.performSearch":                                reflect.TypeOf(DOMPerformSearch{}),
	"DOM.performSearchResult":                          reflect.TypeOf(DOMPerformSearchResult{}),
	"DOM.pushNodeByPathToFrontend":                     reflect.TypeOf(DOMPushNodeByPathToFrontend{}),
	"DOM.pushNodeByPathToFrontendResult":               reflect.TypeOf(DOMPushNodeByPathToFrontendResult{}),
	"DOM.pushNodesByBackendIdsToFrontend":              reflect.TypeOf(DOMPushNodesByBackendIdsToFrontend{}),
	"DOM.pushNodesByBackendIdsToFrontendResult":        reflect.TypeOf(DOMPushNodesByBackendIdsToFrontendResult{}),
	"DOM.querySelector":                                reflect.TypeOf(DOMQuerySelector{}),
	"DOM.querySelectorResult":                          reflect.TypeOf(DOMQuerySelectorResult{}),
	"DOM.querySelectorAll":                             reflect.TypeOf(DOMQuerySelectorAll{}),
	"DOM.querySelectorAllResult":                       reflect.TypeOf(DOMQuerySelectorAllResult{}),
	"DOM.getTopLayerElements":                          reflect.TypeOf(DOMGetTopLayerElements{}),
	"DOM.getTopLayerElementsResult":                    reflect.TypeOf(DOMGetTopLayerElementsResult{}),
	"DOM.redo":                                         reflect.TypeOf(DOMRedo{}),
	"DOM.removeAttribute":                              reflect.TypeOf(DOMRemoveAttribute{}),
	"DOM.removeNode":                                   reflect.TypeOf(DOMRemoveNode{}),
	"DOM.requestChildNodes":                            reflect.TypeOf(DOMRequestChildNodes{}),
	"DOM.requestNode":                                  reflect.TypeOf(DOMRequestNode{}),
	"DOM.requestNodeResult":                            reflect.TypeOf(DOMRequestNodeResult{}),
	"DOM.resolveNode":                                  reflect.TypeOf(DOMResolveNode{}),
	"DOM.resolveNodeResult":                            reflect.TypeOf(DOMResolveNodeResult{}),
	"DOM.setAttributeValue":                            reflect.TypeOf(DOMSetAttributeValue{}),
	"DOM.setAttributesAsText":                          reflect.TypeOf(DOMSetAttributesAsText{}),
	"DOM.setFileInputFiles":                            reflect.TypeOf(DOMSetFileInputFiles{}),
	"DOM.setNodeStackTracesEnabled":                    reflect.TypeOf(DOMSetNodeStackTracesEnabled{}),
	"DOM.getNodeStackTraces":                           reflect.TypeOf(DOMGetNodeStackTraces{}),
	"DOM.getNodeStackTracesResult":                     reflect.TypeOf(DOMGetNodeStackTracesResult{}),
	"DOM.getFileInfo":                                  reflect.TypeOf(DOMGetFileInfo{}),
	"DOM.getFileInfoResult":                            reflect.TypeOf(DOMGetFileInfoResult{}),
	"DOM.setInspectedNode":                             reflect.TypeOf(DOMSetInspectedNode{}),
	"DOM.setNodeName":                                  reflect.TypeOf(DOMSetNodeName{}),
	"DOM.setNodeNameResult":                            reflect.TypeOf(DOMSetNodeNameResult{}),
	"DOM.setNodeValue":                                 reflect.TypeOf(DOMSetNodeValue{}),
	"DOM.setOuterHTML":                                 reflect.TypeOf(DOMSetOuterHTML{}),
	"DOM.undo":                                         reflect.TypeOf(DOMUndo{}),
	"DOM.getFrameOwner":                                reflect.TypeOf(DOMGetFrameOwner{}),
	"DOM.getFrameOwnerResult":                          reflect.TypeOf(DOMGetFrameOwnerResult{}),
	"DOM.getContainerForNode":                          reflect.TypeOf(DOMGetContainerForNode{}),
	"DOM.getContainerForNodeResult":                    reflect.TypeOf(DOMGetContainerForNodeResult{}),
	"DOM.getQueryingDescendantsForContainer":           reflect.TypeOf(DOMGetQueryingDescendantsForContainer{}),
	"DOM.getQueryingDescendantsForContainerResult":     reflect.TypeOf(DOMGetQueryingDescendantsForContainerResult{}),
	"DOM.attributeModified":                            reflect.TypeOf(DOMAttributeModified{}),
	"DOM.attributeRemoved":                             reflect.TypeOf(DOMAttributeRemoved{}),
	"DOM.characterDataModified":                        reflect.TypeOf(DOMCharacterDataModified{}),
	"DOM.childNodeCountUpdated":                        reflect.TypeOf(DOMChildNodeCountUpdated{}),
	"DOM.childNodeInserted":                            reflect.TypeOf(DOMChildNodeInserted{}),
	"DOM.childNodeRemoved":                             reflect.TypeOf(DOMChildNodeRemoved{}),
	"DOM.distributedNodesUpdated":                      reflect.TypeOf(DOMDistributedNodesUpdated{}),
	"DOM.documentUpdated":                              reflect.TypeOf(DOMDocumentUpdated{}),
	"DOM.inlineStyleInvalidated":                       reflect.TypeOf(DOMInlineStyleInvalidated{}),
	"DOM.pseudoElementAdded":                           reflect.TypeOf(DOMPseudoElementAdded{}),
	"DOM.topLayerElementsUpdated":                      reflect.TypeOf(DOMTopLayerElementsUpdated{}),
	"DOM.pseudoElementRemoved":                         reflect.TypeOf(DOMPseudoElementRemoved{}),
	"DOM.setChildNodes":                                reflect.TypeOf(DOMSetChildNodes{}),
	"DOM.shadowRootPopped":                             reflect.TypeOf(DOMShadowRootPopped{}),
	"DOM.shadowRootPushed":                             reflect.TypeOf(DOMShadowRootPushed{}),
	"DOMDebugger.EventListener":                        reflect.TypeOf(DOMDebuggerEventListener{}),
	"DOMDebugger.getEventListeners":                    reflect.TypeOf(DOMDebuggerGetEventListeners{}),
	"DOMDebugger.getEventListenersResult":              reflect.TypeOf(DOMDebuggerGetEventListenersResult{}),
	"DOMDebugger.removeDOMBreakpoint":                  reflect.TypeOf(DOMDebuggerRemoveDOMBreakpoint{}),
	"DOMDebugger.removeEventListenerBreakpoint":        reflect.TypeOf(DOMDebuggerRemoveEventListenerBreakpoint{}),
	"DOMDebugger.removeInstrumentationBreakpoint":      reflect.TypeOf(DOMDebuggerRemoveInstrumentationBreakpoint{}),
	"DOMDebugger.removeXHRBreakpoint":                  reflect.TypeOf(DOMDebuggerRemoveXHRBreakpoint{}),
	"DOMDebugger.setBreakOnCSPViolation":               reflect.TypeOf(DOMDebuggerSetBreakOnCSPViolation{}),
	"DOMDebugger.setDOMBreakpoint":                     reflect.TypeOf(DOMDebuggerSetDOMBreakpoint{}),
	"DOMDebugger.setEventListenerBreakpoint":           reflect.TypeOf(DOMDebuggerSetEventListenerBreakpoint{}),
	"DOMDebugger.setInstrumentationBreakpoint":         reflect.TypeOf(DOMDebuggerSetInstrumentationBreakpoint{}),
	"DOMDebugger.setXHRBreakpoint":                     reflect.TypeOf(DOMDebuggerSetXHRBreakpoint{}),
	"EventBreakpoints.setInstrumentationBreakpoint":    reflect.TypeOf(EventBreakpointsSetInstrumentationBreakpoint{}),
	"EventBreakpoints.removeInstrumentationBreakpoint": reflect.TypeOf(EventBreakpointsRemoveInstrumentationBreakpoint{}),
	"DOMSnapshot.DOMNode":                              reflect.TypeOf(DOMSnapshotDOMNode{}),
	"DOMSnapshot.InlineTextBox":                        reflect.TypeOf(DOMSnapshotInlineTextBox{}),
	"DOMSnapshot.LayoutTreeNode":                       reflect.TypeOf(DOMSnapshotLayoutTreeNode{}),
	"DOMSnapshot.ComputedStyle":                        reflect.TypeOf(DOMSnapshotComputedStyle{}),
	"DOMSnapshot.NameValue":                            reflect.TypeOf(DOMSnapshotNameValue{}),
	"DOMSnapshot.RareStringData":                       reflect.TypeOf(DOMSnapshotRareStringData{}),
	"DOMSnapshot.RareBooleanData":                      reflect.TypeOf(DOMSnapshotRareBooleanData{}),
	"DOMSnapshot.RareIntegerData":                      reflect.TypeOf(DOMSnapshotRareIntegerData{}),
	"DOMSnapshot.DocumentSnapshot":                     reflect.TypeOf(DOMSnapshotDocumentSnapshot{}),
	"DOMSnapshot.NodeTreeSnapshot":                     reflect.TypeOf(DOMSnapshotNodeTreeSnapshot{}),
	"DOMSnapshot.LayoutTreeSnapshot":                   reflect.TypeOf(DOMSnapshotLayoutTreeSnapshot{}),
	"DOMSnapshot.TextBoxSnapshot":                      reflect.TypeOf(DOMSnapshotTextBoxSnapshot{}),
	"DOMSnapshot.disable":                              reflect.TypeOf(DOMSnapshotDisable{}),
	"DOMSnapshot.enable":                               reflect.TypeOf(DOMSnapshotEnable{}),
	"DOMSnapshot.getSnapshot":                          reflect.TypeOf(DOMSnapshotGetSnapshot{}),
	"DOMSnapshot.getSnapshotResult":                    reflect.TypeOf(DOMSnapshotGetSnapshotResult{}),
	"DOMSnapshot.captureSnapshot":                      reflect.TypeOf(DOMSnapshotCaptureSnapshot{}),
	"DOMSnapshot.captureSnapshotResult":                reflect.TypeOf(DOMSnapshotCaptureSnapshotResult{}),
	"DOMStorage.StorageId":                             reflect.TypeOf(DOMStorageStorageID{}),
	"DOMStorage.clear":                                 reflect.TypeOf(DOMStorageClear{}),
	"DOMStorage.disable":                               reflect.TypeOf(DOMStorageDisable{}),
	"DOMStorage.enable":                                reflect.TypeOf(DOMStorageEnable{}),
	"DOMStorage.getDOMStorageItems":                    reflect.TypeOf(DOMStorageGetDOMStorageItems{}),
	"DOMStorage.getDOMStorageItemsResult":              reflect.TypeOf(DOMStorageGetDOMStorageItemsResult{}),
	"DOMStorage.removeDOMStorageItem":                  reflect.TypeOf(DOMStorageRemoveDOMStorageItem{}),
	"DOMStorage.setDOMStorageItem":                     reflect.TypeOf(DOMStorageSetDOMStorageItem{}),
	"DOMStorage.domStorageItemAdded":                   reflect.TypeOf(DOMStorageDomStorageItemAdded{}),
	"DOMStorage.domStorageItemRemoved":                 reflect.TypeOf(DOMStorageDomStorageItemRemoved{}),
	"DOMStorage.domStorageItemUpdated":                 reflect.TypeOf(DOMStorageDomStorageItemUpdated{}),
	"DOMStorage.domStorageItemsCleared":                reflect.TypeOf(DOMStorageDomStorageItemsCleared{}),
	"Database.Database":                                reflect.TypeOf(DatabaseDatabase{}),
	"Database.Error":                                   reflect.TypeOf(DatabaseError{}),
	"Database.disable":                                 reflect.TypeOf(DatabaseDisable{}),
	"Database.enable":                                  reflect.TypeOf(DatabaseEnable{}),
	"Database.executeSQL":                              reflect.TypeOf(DatabaseExecuteSQL{}),
	"Database.executeSQLResult":                        reflect.TypeOf(DatabaseExecuteSQLResult{}),
	"Database.getDatabaseTableNames":                   reflect.TypeOf(DatabaseGetDatabaseTableNames{}),
	"Database.getDatabaseTableNamesResult":             reflect.TypeOf(DatabaseGetDatabaseTableNamesResult{}),
	"Database.addDatabase":                             reflect.TypeOf(DatabaseAddDatabase{}),
	"DeviceOrientation.clearDeviceOrientationOverride": reflect.TypeOf(DeviceOrientationClearDeviceOrientationOverride{}),
	"DeviceOrientation.setDeviceOrientationOverride":   reflect.TypeOf(DeviceOrientationSetDeviceOrientationOverride{}),
	"Emulation.ScreenOrientation":                      reflect.TypeOf(EmulationScreenOrientation{}),
	"Emulation.DisplayFeature":                         reflect.TypeOf(EmulationDisplayFeature{}),
	"Emulation.MediaFeature":                           reflect.TypeOf(EmulationMediaFeature{}),
	"Emulation.UserAgentBrandVersion":                  reflect.TypeOf(EmulationUserAgentBrandVersion{}),
	"Emulation.UserAgentMetadata":                      reflect.TypeOf(EmulationUserAgentMetadata{}),
	"Emulation.canEmulate":                             reflect.TypeOf(EmulationCanEmulate{}),
	"Emulation.canEmulateResult":                       reflect.TypeOf(EmulationCanEmulateResult{}),
	"Emulation.clearDeviceMetricsOverride":             reflect.TypeOf(EmulationClearDeviceMetricsOverride{}),
	"Emulation.clearGeolocationOverride":               reflect.TypeOf(EmulationClearGeolocationOverride{}),
	"Emulation.resetPageScaleFactor":                   reflect.TypeOf(EmulationResetPageScaleFactor{}),
	"Emulation.setFocusEmulationEnabled":               reflect.TypeOf(EmulationSetFocusEmulationEnabled{}),
	"Emulation.setAutoDarkModeOverride":                reflect.TypeOf(EmulationSetAutoDarkModeOverride{}),
	"Emulation.setCPUThrottlingRate":                   reflect.TypeOf(EmulationSetCPUThrottlingRate{}),
	"Emulation.setDefaultBackgroundColorOverride":      reflect.TypeOf(EmulationSetDefaultBackgroundColorOverride{}),
	"Emulation.setDeviceMetricsOverride":               reflect.TypeOf(EmulationSetDeviceMetricsOverride{}),
	"Emulation.setScrollbarsHidden":                    reflect.TypeOf(EmulationSetScrollbarsHidden{}),
	"Emulation.setDocumentCookieDisabled":              reflect.TypeOf(EmulationSetDocumentCookieDisabled{}),
	"Emulation.setEmitTouchEventsForMouse":             reflect.TypeOf(EmulationSetEmitTouchEventsForMouse{}),
	"Emulation.setEmulatedMedia":                       reflect.TypeOf(EmulationSetEmulatedMedia{}),
	"Emulation.setEmulatedVisionDeficiency":            reflect.TypeOf(EmulationSetEmulatedVisionDeficiency{}),
	"Emulation.setGeolocationOverride":                 reflect.TypeOf(EmulationSetGeolocationOverride{}),
	"Emulation.setIdleOverride":                        reflect.TypeOf(EmulationSetIdleOverride{}),
	"Emulation.clearIdleOverride":                      reflect.TypeOf(EmulationClearIdleOverride{}),
	"Emulation.setNavigatorOverrides":                  reflect.TypeOf(EmulationSetNavigatorOverrides{}),
	"Emulation.setPageScaleFactor":                     reflect.TypeOf(EmulationSetPageScaleFactor{}),
	"Emulation.setScriptExecutionDisabled":             reflect.TypeOf(EmulationSetScriptExecutionDisabled{}),
	"Emulation.setTouchEmulationEnabled":               reflect.TypeOf(EmulationSetTouchEmulationEnabled{}),
	"Emulation.setVirtualTimePolicy":                   reflect.TypeOf(EmulationSetVirtualTimePolicy{}),
	"Emulation.setVirtualTimePolicyResult":             reflect.TypeOf(EmulationSetVirtualTimePolicyResult{}),
	"Emulation.setLocaleOverride":                      reflect.TypeOf(EmulationSetLocaleOverride{}),
	"Emulation.setTimezoneOverride":                    reflect.TypeOf(EmulationSetTimezoneOverride{}),
	"Emulation.setVisibleSize":                         reflect.TypeOf(EmulationSetVisibleSize{}),
	"Emulation.setDisabledImageTypes":                  reflect.TypeOf(EmulationSetDisabledImageTypes{}),
	"Emulation.setHardwareConcurrencyOverride":         reflect.TypeOf(EmulationSetHardwareConcurrencyOverride{}),
	"Emulation.setUserAgentOverride":                   reflect.TypeOf(EmulationSetUserAgentOverride{}),
	"Emulation.setAutomationOverride":                  reflect.TypeOf(EmulationSetAutomationOverride{}),
	"Emulation.virtualTimeBudgetExpired":               reflect.TypeOf(EmulationVirtualTimeBudgetExpired{}),
	"HeadlessExperimental.ScreenshotParams":            reflect.TypeOf(HeadlessExperimentalScreenshotParams{}),
	"HeadlessExperimental.beginFrame":                  reflect.TypeOf(HeadlessExperimentalBeginFrame{}),
	"HeadlessExperimental.beginFrameResult":            reflect.TypeOf(HeadlessExperimentalBeginFrameResult{}),
	"HeadlessExperimental.disable":                     reflect.TypeOf(HeadlessExperimentalDisable{}),
	"HeadlessExperimental.enable":                      reflect.TypeOf(HeadlessExperimentalEnable{}),
	"HeadlessExperimental.needsBeginFramesChanged":     reflect.TypeOf(HeadlessExperimentalNeedsBeginFramesChanged{}),
	"IO.close":                                              reflect.TypeOf(IOClose{}),
	"IO.read":                                               reflect.TypeOf(IORead{}),
	"IO.readResult":                                         reflect.TypeOf(IOReadResult{}),
	"IO.resolveBlob":                                        reflect.TypeOf(IOResolveBlob{}),
	"IO.resolveBlobResult":                                  reflect.TypeOf(IOResolveBlobResult{}),
	"IndexedDB.DatabaseWithObjectStores":                    reflect.TypeOf(IndexedDBDatabaseWithObjectStores{}),
	"IndexedDB.ObjectStore":                                 reflect.TypeOf(IndexedDBObjectStore{}),
	"IndexedDB.ObjectStoreIndex":                            reflect.TypeOf(IndexedDBObjectStoreIndex{}),
	"IndexedDB.Key":                                         reflect.TypeOf(IndexedDBKey{}),
	"IndexedDB.KeyRange":                                    reflect.TypeOf(IndexedDBKeyRange{}),
	"IndexedDB.DataEntry":                                   reflect.TypeOf(IndexedDBDataEntry{}),
	"IndexedDB.KeyPath":                                     reflect.TypeOf(IndexedDBKeyPath{}),
	"IndexedDB.clearObjectStore":                            reflect.TypeOf(IndexedDBClearObjectStore{}),
	"IndexedDB.deleteDatabase":                              reflect.TypeOf(IndexedDBDeleteDatabase{}),
	"IndexedDB.deleteObjectStoreEntries":                    reflect.TypeOf(IndexedDBDeleteObjectStoreEntries{}),
	"IndexedDB.disable":                                     reflect.TypeOf(IndexedDBDisable{}),
	"IndexedDB.enable":                                      reflect.TypeOf(IndexedDBEnable{}),
	"IndexedDB.requestData":                                 reflect.TypeOf(IndexedDBRequestData{}),
	"IndexedDB.requestDataResult":                           reflect.TypeOf(IndexedDBRequestDataResult{}),
	"IndexedDB.getMetadata":                                 reflect.TypeOf(IndexedDBGetMetadata{}),
	"IndexedDB.getMetadataResult":                           reflect.TypeOf(IndexedDBGetMetadataResult{}),
	"IndexedDB.requestDatabase":                             reflect.TypeOf(IndexedDBRequestDatabase{}),
	"IndexedDB.requestDatabaseResult":                       reflect.TypeOf(IndexedDBRequestDatabaseResult{}),
	"IndexedDB.requestDatabaseNames":                        reflect.TypeOf(IndexedDBRequestDatabaseNames{}),
	"IndexedDB.requestDatabaseNamesResult":                  reflect.TypeOf(IndexedDBRequestDatabaseNamesResult{}),
	"Input.TouchPoint":                                      reflect.TypeOf(InputTouchPoint{}),
	"Input.DragDataItem":                                    reflect.TypeOf(InputDragDataItem{}),
	"Input.DragData":                                        reflect.TypeOf(InputDragData{}),
	"Input.dispatchDragEvent":                               reflect.TypeOf(InputDispatchDragEvent{}),
	"Input.dispatchKeyEvent":                                reflect.TypeOf(InputDispatchKeyEvent{}),
	"Input.insertText":                                      reflect.TypeOf(InputInsertText{}),
	"Input.imeSetComposition":                               reflect.TypeOf(InputImeSetComposition{}),
	"Input.dispatchMouseEvent":                              reflect.TypeOf(InputDispatchMouseEvent{}),
	"Input.dispatchTouchEvent":                              reflect.TypeOf(InputDispatchTouchEvent{}),
	"Input.emulateTouchFromMouseEvent":                      reflect.TypeOf(InputEmulateTouchFromMouseEvent{}),
	"Input.setIgnoreInputEvents":                            reflect.TypeOf(InputSetIgnoreInputEvents{}),
	"Input.setInterceptDrags":                               reflect.TypeOf(InputSetInterceptDrags{}),
	"Input.synthesizePinchGesture":                          reflect.TypeOf(InputSynthesizePinchGesture{}),
	"Input.synthesizeScrollGesture":                         reflect.TypeOf(InputSynthesizeScrollGesture{}),
	"Input.synthesizeTapGesture":                            reflect.TypeOf(InputSynthesizeTapGesture{}),
	"Input.dragIntercepted":                                 reflect.TypeOf(InputDragIntercepted{}),
	"Inspector.disable":                                     reflect.TypeOf(InspectorDisable{}),
	"Inspector.enable":                                      reflect.TypeOf(InspectorEnable{}),
	"Inspector.detached":                                    reflect.TypeOf(InspectorDetached{}),
	"Inspector.targetCrashed":                               reflect.TypeOf(InspectorTargetCrashed{}),
	"Inspector.targetReloadedAfterCrash":                    reflect.TypeOf(InspectorTargetReloadedAfterCrash{}),
	"LayerTree.ScrollRect":                                  reflect.TypeOf(LayerTreeScrollRect{}),
	"LayerTree.StickyPositionConstraint":                    reflect.TypeOf(LayerTreeStickyPositionConstraint{}),
	"LayerTree.PictureTile":                                 reflect.TypeOf(LayerTreePictureTile{}),
	"LayerTree.Layer":                                       reflect.TypeOf(LayerTreeLayer{}),
	"LayerTree.compositingReasons":                          reflect.TypeOf(LayerTreeCompositingReasons{}),
	"LayerTree.compositingReasonsResult":                    reflect.TypeOf(LayerTreeCompositingReasonsResult{}),
	"LayerTree.disable":                                     reflect.TypeOf(LayerTreeDisable{}),
	"LayerTree.enable":                                      reflect.TypeOf(LayerTreeEnable{}),
	"LayerTree.loadSnapshot":                                reflect.TypeOf(LayerTreeLoadSnapshot{}),
	"LayerTree.loadSnapshotResult":                          reflect.TypeOf(LayerTreeLoadSnapshotResult{}),
	"LayerTree.makeSnapshot":                                reflect.TypeOf(LayerTreeMakeSnapshot{}),
	"LayerTree.makeSnapshotResult":                          reflect.TypeOf(LayerTreeMakeSnapshotResult{}),
	"LayerTree.profileSnapshot":                             reflect.TypeOf(LayerTreeProfileSnapshot{}),
	"LayerTree.profileSnapshotResult":                       reflect.TypeOf(LayerTreeProfileSnapshotResult{}),
	"LayerTree.releaseSnapshot":                             reflect.TypeOf(LayerTreeReleaseSnapshot{}),
	"LayerTree.replaySnapshot":                              reflect.TypeOf(LayerTreeReplaySnapshot{}),
	"LayerTree.replaySnapshotResult":                        reflect.TypeOf(LayerTreeReplaySnapshotResult{}),
	"LayerTree.snapshotCommandLog":                          reflect.TypeOf(LayerTreeSnapshotCommandLog{}),
	"LayerTree.snapshotCommandLogResult":                    reflect.TypeOf(LayerTreeSnapshotCommandLogResult{}),
	"LayerTree.layerPainted":                                reflect.TypeOf(LayerTreeLayerPainted{}),
	"LayerTree.layerTreeDidChange":                          reflect.TypeOf(LayerTreeLayerTreeDidChange{}),
	"Log.LogEntry":                                          reflect.TypeOf(LogLogEntry{}),
	"Log.ViolationSetting":                                  reflect.TypeOf(LogViolationSetting{}),
	"Log.clear":                                             reflect.TypeOf(LogClear{}),
	"Log.disable":                                           reflect.TypeOf(LogDisable{}),
	"Log.enable":                                            reflect.TypeOf(LogEnable{}),
	"Log.startViolationsReport":                             reflect.TypeOf(LogStartViolationsReport{}),
	"Log.stopViolationsReport":                              reflect.TypeOf(LogStopViolationsReport{}),
	"Log.entryAdded":                                        reflect.TypeOf(LogEntryAdded{}),
	"Memory.SamplingProfileNode":                            reflect.TypeOf(MemorySamplingProfileNode{}),
	"Memory.SamplingProfile":                                reflect.TypeOf(MemorySamplingProfile{}),
	"Memory.Module":                                         reflect.TypeOf(MemoryModule{}),
	"Memory.getDOMCounters":                                 reflect.TypeOf(MemoryGetDOMCounters{}),
	"Memory.getDOMCountersResult":                           reflect.TypeOf(MemoryGetDOMCountersResult{}),
	"Memory.prepareForLeakDetection":                        reflect.TypeOf(MemoryPrepareForLeakDetection{}),
	"Memory.forciblyPurgeJavaScriptMemory":                  reflect.TypeOf(MemoryForciblyPurgeJavaScriptMemory{}),
	"Memory.setPressureNotificationsSuppressed":             reflect.TypeOf(MemorySetPressureNotificationsSuppressed{}),
	"Memory.simulatePressureNotification":                   reflect.TypeOf(MemorySimulatePressureNotification{}),
	"Memory.startSampling":                                  reflect.TypeOf(MemoryStartSampling{}),
	"Memory.stopSampling":                                   reflect.TypeOf(MemoryStopSampling{}),
	"Memory.getAllTimeSamplingProfile":                      reflect.TypeOf(MemoryGetAllTimeSamplingProfile{}),
	"Memory.getAllTimeSamplingProfileResult":                reflect.TypeOf(MemoryGetAllTimeSamplingProfileResult{}),
	"Memory.getBrowserSamplingProfile":                      reflect.TypeOf(MemoryGetBrowserSamplingProfile{}),
	"Memory.getBrowserSamplingProfileResult":                reflect.TypeOf(MemoryGetBrowserSamplingProfileResult{}),
	"Memory.getSamplingProfile":                             reflect.TypeOf(MemoryGetSamplingProfile{}),
	"Memory.getSamplingProfileResult":                       reflect.TypeOf(MemoryGetSamplingProfileResult{}),
	"Network.ResourceTiming":                                reflect.TypeOf(NetworkResourceTiming{}),
	"Network.PostDataEntry":                                 reflect.TypeOf(NetworkPostDataEntry{}),
	"Network.Request":                                       reflect.TypeOf(NetworkRequest{}),
	"Network.SignedCertificateTimestamp":                    reflect.TypeOf(NetworkSignedCertificateTimestamp{}),
	"Network.SecurityDetails":                               reflect.TypeOf(NetworkSecurityDetails{}),
	"Network.CorsErrorStatus":                               reflect.TypeOf(NetworkCorsErrorStatus{}),
	"Network.TrustTokenParams":                              reflect.TypeOf(NetworkTrustTokenParams{}),
	"Network.Response":                                      reflect.TypeOf(NetworkResponse{}),
	"Network.WebSocketRequest":                              reflect.TypeOf(NetworkWebSocketRequest{}),
	"Network.WebSocketResponse":                             reflect.TypeOf(NetworkWebSocketResponse{}),
	"Network.WebSocketFrame":                                reflect.TypeOf(NetworkWebSocketFrame{}),
	"Network.CachedResource":                                reflect.TypeOf(NetworkCachedResource{}),
	"Network.Initiator":                                     reflect.TypeOf(NetworkInitiator{}),
	"Network.Cookie":                                        reflect.TypeOf(NetworkCookie{}),
	"Network.BlockedSetCookieWithReason":                    reflect.TypeOf(NetworkBlockedSetCookieWithReason{}),
	"Network.BlockedCookieWithReason":                       reflect.TypeOf(NetworkBlockedCookieWithReason{}),
	"Network.CookieParam":                                   reflect.TypeOf(NetworkCookieParam{}),
	"Network.AuthChallenge":                                 reflect.TypeOf(NetworkAuthChallenge{}),
	"Network.AuthChallengeResponse":                         reflect.TypeOf(NetworkAuthChallengeResponse{}),
	"Network.RequestPattern":                                reflect.TypeOf(NetworkRequestPattern{}),
	"Network.SignedExchangeSignature":                       reflect.TypeOf(NetworkSignedExchangeSignature{}),
	"Network.SignedExchangeHeader":                          reflect.TypeOf(NetworkSignedExchangeHeader{}),
	"Network.SignedExchangeError":                           reflect.TypeOf(NetworkSignedExchangeError{}),
	"Network.SignedExchangeInfo":                            reflect.TypeOf(NetworkSignedExchangeInfo{}),
	"Network.ConnectTiming":                                 reflect.TypeOf(NetworkConnectTiming{}),
	"Network.ClientSecurityState":                           reflect.TypeOf(NetworkClientSecurityState{}),
	"Network.CrossOriginOpenerPolicyStatus":                 reflect.TypeOf(NetworkCrossOriginOpenerPolicyStatus{}),
	"Network.CrossOriginEmbedderPolicyStatus":               reflect.TypeOf(NetworkCrossOriginEmbedderPolicyStatus{}),
	"Network.SecurityIsolationStatus":                       reflect.TypeOf(NetworkSecurityIsolationStatus{}),
	"Network.ReportingApiReport":                            reflect.TypeOf(NetworkReportingAPIReport{}),
	"Network.ReportingApiEndpoint":                          reflect.TypeOf(NetworkReportingAPIEndpoint{}),
	"Network.LoadNetworkResourcePageResult":                 reflect.TypeOf(NetworkLoadNetworkResourcePageResult{}),
	"Network.LoadNetworkResourceOptions":                    reflect.TypeOf(NetworkLoadNetworkResourceOptions{}),
	"Network.setAcceptedEncodings":                          reflect.TypeOf(NetworkSetAcceptedEncodings{}),
	"Network.clearAcceptedEncodingsOverride":                reflect.TypeOf(NetworkClearAcceptedEncodingsOverride{}),
	"Network.canClearBrowserCache":                          reflect.TypeOf(NetworkCanClearBrowserCache{}),
	"Network.canClearBrowserCacheResult":                    reflect.TypeOf(NetworkCanClearBrowserCacheResult{}),
	"Network.canClearBrowserCookies":                        reflect.TypeOf(NetworkCanClearBrowserCookies{}),
	"Network.canClearBrowserCookiesResult":                  reflect.TypeOf(NetworkCanClearBrowserCookiesResult{}),
	"Network.canEmulateNetworkConditions":                   reflect.TypeOf(NetworkCanEmulateNetworkConditions{}),
	"Network.canEmulateNetworkConditionsResult":             reflect.TypeOf(NetworkCanEmulateNetworkConditionsResult{}),
	"Network.clearBrowserCache":                             reflect.TypeOf(NetworkClearBrowserCache{}),
	"Network.clearBrowserCookies":                           reflect.TypeOf(NetworkClearBrowserCookies{}),
	"Network.continueInterceptedRequest":                    reflect.TypeOf(NetworkContinueInterceptedRequest{}),
	"Network.deleteCookies":                                 reflect.TypeOf(NetworkDeleteCookies{}),
	"Network.disable":                                       reflect.TypeOf(NetworkDisable{}),
	"Network.emulateNetworkConditions":                      reflect.TypeOf(NetworkEmulateNetworkConditions{}),
	"Network.enable":                                        reflect.TypeOf(NetworkEnable{}),
	"Network.getAllCookies":                                 reflect.TypeOf(NetworkGetAllCookies{}),
	"Network.getAllCookiesResult":                           reflect.TypeOf(NetworkGetAllCookiesResult{}),
	"Network.getCertificate":                                reflect.TypeOf(NetworkGetCertificate{}),
	"Network.getCertificateResult":                          reflect.TypeOf(NetworkGetCertificateResult{}),
	"Network.getCookies":                                    reflect.TypeOf(NetworkGetCookies{}),
	"Network.getCookiesResult":                              reflect.TypeOf(NetworkGetCookiesResult{}),
	"Network.getResponseBody":                               reflect.TypeOf(NetworkGetResponseBody{}),
	"Network.getResponseBodyResult":                         reflect.TypeOf(NetworkGetResponseBodyResult{}),
	"Network.getRequestPostData":                            reflect.TypeOf(NetworkGetRequestPostData{}),
	"Network.getRequestPostDataResult":                      reflect.TypeOf(NetworkGetRequestPostDataResult{}),
	"Network.getResponseBodyForInterception":                reflect.TypeOf(NetworkGetResponseBodyForInterception{}),
	"Network.getResponseBodyForInterceptionResult":          reflect.TypeOf(NetworkGetResponseBodyForInterceptionResult{}),
	"Network.takeResponseBodyForInterceptionAsStream":       reflect.TypeOf(NetworkTakeResponseBodyForInterceptionAsStream{}),
	"Network.takeResponseBodyForInterceptionAsStreamResult": reflect.TypeOf(NetworkTakeResponseBodyForInterceptionAsStreamResult{}),
	"Network.replayXHR":                                     reflect.TypeOf(NetworkReplayXHR{}),
	"Network.searchInResponseBody":                          reflect.TypeOf(NetworkSearchInResponseBody{}),
	"Network.searchInResponseBodyResult":                    reflect.TypeOf(NetworkSearchInResponseBodyResult{}),
	"Network.setBlockedURLs":                                reflect.TypeOf(NetworkSetBlockedURLs{}),
	"Network.setBypassServiceWorker":                        reflect.TypeOf(NetworkSetBypassServiceWorker{}),
	"Network.setCacheDisabled":                              reflect.TypeOf(NetworkSetCacheDisabled{}),
	"Network.setCookie":                                     reflect.TypeOf(NetworkSetCookie{}),
	"Network.setCookieResult":                               reflect.TypeOf(NetworkSetCookieResult{}),
	"Network.setCookies":                                    reflect.TypeOf(NetworkSetCookies{}),
	"Network.setExtraHTTPHeaders":                           reflect.TypeOf(NetworkSetExtraHTTPHeaders{}),
	"Network.setAttachDebugStack":                           reflect.TypeOf(NetworkSetAttachDebugStack{}),
	"Network.setRequestInterception":                        reflect.TypeOf(NetworkSetRequestInterception{}),
	"Network.setUserAgentOverride":                          reflect.TypeOf(NetworkSetUserAgentOverride{}),
	"Network.getSecurityIsolationStatus":                    reflect.TypeOf(NetworkGetSecurityIsolationStatus{}),
	"Network.getSecurityIsolationStatusResult":              reflect.TypeOf(NetworkGetSecurityIsolationStatusResult{}),
	"Network.enableReportingApi":                            reflect.TypeOf(NetworkEnableReportingAPI{}),
	"Network.loadNetworkResource":                           reflect.TypeOf(NetworkLoadNetworkResource{}),
	"Network.loadNetworkResourceResult":                     reflect.TypeOf(NetworkLoadNetworkResourceResult{}),
	"Network.dataReceived":                                  reflect.TypeOf(NetworkDataReceived{}),
	"Network.eventSourceMessageReceived":                    reflect.TypeOf(NetworkEventSourceMessageReceived{}),
	"Network.loadingFailed":                                 reflect.TypeOf(NetworkLoadingFailed{}),
	"Network.loadingFinished":                               reflect.TypeOf(NetworkLoadingFinished{}),
	"Network.requestIntercepted":                            reflect.TypeOf(NetworkRequestIntercepted{}),
	"Network.requestServedFromCache":                        reflect.TypeOf(NetworkRequestServedFromCache{}),
	"Network.requestWillBeSent":                             reflect.TypeOf(NetworkRequestWillBeSent{}),
	"Network.resourceChangedPriority":                       reflect.TypeOf(NetworkResourceChangedPriority{}),
	"Network.signedExchangeReceived":                        reflect.TypeOf(NetworkSignedExchangeReceived{}),
	"Network.responseReceived":                              reflect.TypeOf(NetworkResponseReceived{}),
	"Network.webSocketClosed":                               reflect.TypeOf(NetworkWebSocketClosed{}),
	"Network.webSocketCreated":                              reflect.TypeOf(NetworkWebSocketCreated{}),
	"Network.webSocketFrameError":                           reflect.TypeOf(NetworkWebSocketFrameError{}),
	"Network.webSocketFrameReceived":                        reflect.TypeOf(NetworkWebSocketFrameReceived{}),
	"Network.webSocketFrameSent":                            reflect.TypeOf(NetworkWebSocketFrameSent{}),
	"Network.webSocketHandshakeResponseReceived":            reflect.TypeOf(NetworkWebSocketHandshakeResponseReceived{}),
	"Network.webSocketWillSendHandshakeRequest":             reflect.TypeOf(NetworkWebSocketWillSendHandshakeRequest{}),
	"Network.webTransportCreated":                           reflect.TypeOf(NetworkWebTransportCreated{}),
	"Network.webTransportConnectionEstablished":             reflect.TypeOf(NetworkWebTransportConnectionEstablished{}),
	"Network.webTransportClosed":                            reflect.TypeOf(NetworkWebTransportClosed{}),
	"Network.requestWillBeSentExtraInfo":                    reflect.TypeOf(NetworkRequestWillBeSentExtraInfo{}),
	"Network.responseReceivedExtraInfo":                     reflect.TypeOf(NetworkResponseReceivedExtraInfo{}),
	"Network.trustTokenOperationDone":                       reflect.TypeOf(NetworkTrustTokenOperationDone{}),
	"Network.subresourceWebBundleMetadataReceived":          reflect.TypeOf(NetworkSubresourceWebBundleMetadataReceived{}),
	"Network.subresourceWebBundleMetadataError":             reflect.TypeOf(NetworkSubresourceWebBundleMetadataError{}),
	"Network.subresourceWebBundleInnerResponseParsed":       reflect.TypeOf(NetworkSubresourceWebBundleInnerResponseParsed{}),
	"Network.subresourceWebBundleInnerResponseError":        reflect.TypeOf(NetworkSubresourceWebBundleInnerResponseError{}),
	"Network.reportingApiReportAdded":                       reflect.TypeOf(NetworkReportingAPIReportAdded{}),
	"Network.reportingApiReportUpdated":                     reflect.TypeOf(NetworkReportingAPIReportUpdated{}),
	"Network.reportingApiEndpointsChangedForOrigin":         reflect.TypeOf(NetworkReportingAPIEndpointsChangedForOrigin{}),
	"Overlay.SourceOrderConfig":                             reflect.TypeOf(OverlaySourceOrderConfig{}),
	"Overlay.GridHighlightConfig":                           reflect.TypeOf(OverlayGridHighlightConfig{}),
	"Overlay.FlexContainerHighlightConfig":                  reflect.TypeOf(OverlayFlexContainerHighlightConfig{}),
	"Overlay.FlexItemHighlightConfig":                       reflect.TypeOf(OverlayFlexItemHighlightConfig{}),
	"Overlay.LineStyle":                                     reflect.TypeOf(OverlayLineStyle{}),
	"Overlay.BoxStyle":                                      reflect.TypeOf(OverlayBoxStyle{}),
	"Overlay.HighlightConfig":                               reflect.TypeOf(OverlayHighlightConfig{}),
	"Overlay.GridNodeHighlightConfig":                       reflect.TypeOf(OverlayGridNodeHighlightConfig{}),
	"Overlay.FlexNodeHighlightConfig":                       reflect.TypeOf(OverlayFlexNodeHighlightConfig{}),
	"Overlay.ScrollSnapContainerHighlightConfig":            reflect.TypeOf(OverlayScrollSnapContainerHighlightConfig{}),
	"Overlay.ScrollSnapHighlightConfig":                     reflect.TypeOf(OverlayScrollSnapHighlightConfig{}),
	"Overlay.HingeConfig":                                   reflect.TypeOf(OverlayHingeConfig{}),
	"Overlay.ContainerQueryHighlightConfig":                 reflect.TypeOf(OverlayContainerQueryHighlightConfig{}),
	"Overlay.ContainerQueryContainerHighlightConfig":        reflect.TypeOf(OverlayContainerQueryContainerHighlightConfig{}),
	"Overlay.IsolatedElementHighlightConfig":                reflect.TypeOf(OverlayIsolatedElementHighlightConfig{}),
	"Overlay.IsolationModeHighlightConfig":                  reflect.TypeOf(OverlayIsolationModeHighlightConfig{}),
	"Overlay.disable":                                       reflect.TypeOf(OverlayDisable{}),
	"Overlay.enable":                                        reflect.TypeOf(OverlayEnable{}),
	"Overlay.getHighlightObjectForTest":                     reflect.TypeOf(OverlayGetHighlightObjectForTest{}),
	"Overlay.getHighlightObjectForTestResult":               reflect.TypeOf(OverlayGetHighlightObjectForTestResult{}),
	"Overlay.getGridHighlightObjectsForTest":                reflect.TypeOf(OverlayGetGridHighlightObjectsForTest{}),
	"Overlay.getGridHighlightObjectsForTestResult":          reflect.TypeOf(OverlayGetGridHighlightObjectsForTestResult{}),
	"Overlay.getSourceOrderHighlightObjectForTest":          reflect.TypeOf(OverlayGetSourceOrderHighlightObjectForTest{}),
	"Overlay.getSourceOrderHighlightObjectForTestResult":    reflect.TypeOf(OverlayGetSourceOrderHighlightObjectForTestResult{}),
	"Overlay.hideHighlight":                                 reflect.TypeOf(OverlayHideHighlight{}),
	"Overlay.highlightFrame":                                reflect.TypeOf(OverlayHighlightFrame{}),
	"Overlay.highlightNode":                                 reflect.TypeOf(OverlayHighlightNode{}),
	"Overlay.highlightQuad":                                 reflect.TypeOf(OverlayHighlightQuad{}),
	"Overlay.highlightRect":                                 reflect.TypeOf(OverlayHighlightRect{}),
	"Overlay.highlightSourceOrder":                          reflect.TypeOf(OverlayHighlightSourceOrder{}),
	"Overlay.setInspectMode":                                reflect.TypeOf(OverlaySetInspectMode{}),
	"Overlay.setShowAdHighlights":                           reflect.TypeOf(OverlaySetShowAdHighlights{}),
	"Overlay.setPausedInDebuggerMessage":                    reflect.TypeOf(OverlaySetPausedInDebuggerMessage{}),
	"Overlay.setShowDebugBorders":                           reflect.TypeOf(OverlaySetShowDebugBorders{}),
	"Overlay.setShowFPSCounter":                             reflect.TypeOf(OverlaySetShowFPSCounter{}),
	"Overlay.setShowGridOverlays":                           reflect.TypeOf(OverlaySetShowGridOverlays{}),
	"Overlay.setShowFlexOverlays":                           reflect.TypeOf(OverlaySetShowFlexOverlays{}),
	"Overlay.setShowScrollSnapOverlays":                     reflect.TypeOf(OverlaySetShowScrollSnapOverlays{}),
	"Overlay.setShowContainerQueryOverlays":                 reflect.TypeOf(OverlaySetShowContainerQueryOverlays{}),
	"Overlay.setShowPaintRects":                             reflect.TypeOf(OverlaySetShowPaintRects{}),
	"Overlay.setShowLayoutShiftRegions":                     reflect.TypeOf(OverlaySetShowLayoutShiftRegions{}),
	"Overlay.setShowScrollBottleneckRects":                  reflect.TypeOf(OverlaySetShowScrollBottleneckRects{}),
	"Overlay.setShowHitTestBorders":                         reflect.TypeOf(OverlaySetShowHitTestBorders{}),
	"Overlay.setShowWebVitals":                              reflect.TypeOf(OverlaySetShowWebVitals{}),
	"Overlay.setShowViewportSizeOnResize":                   reflect.TypeOf(OverlaySetShowViewportSizeOnResize{}),
	"Overlay.setShowHinge":                                  reflect.TypeOf(OverlaySetShowHinge{}),
	"Overlay.setShowIsolatedElements":                       reflect.TypeOf(OverlaySetShowIsolatedElements{}),
	"Overlay.inspectNodeRequested":                          reflect.TypeOf(OverlayInspectNodeRequested{}),
	"Overlay.nodeHighlightRequested":                        reflect.TypeOf(OverlayNodeHighlightRequested{}),
	"Overlay.screenshotRequested":                           reflect.TypeOf(OverlayScreenshotRequested{}),
	"Overlay.inspectModeCanceled":                           reflect.TypeOf(OverlayInspectModeCanceled{}),
	"Page.AdFrameStatus":                                    reflect.TypeOf(PageAdFrameStatus{}),
	"Page.AdScriptId":                                       reflect.TypeOf(PageAdScriptID{}),
	"Page.PermissionsPolicyBlockLocator":                    reflect.TypeOf(PagePermissionsPolicyBlockLocator{}),
	"Page.PermissionsPolicyFeatureState":                    reflect.TypeOf(PagePermissionsPolicyFeatureState{}),
	"Page.OriginTrialToken":                                 reflect.TypeOf(PageOriginTrialToken{}),
	"Page.OriginTrialTokenWithStatus":                       reflect.TypeOf(PageOriginTrialTokenWithStatus{}),
	"Page.OriginTrial":                                      reflect.TypeOf(PageOriginTrial{}),
	"Page.Frame":                                            reflect.TypeOf(PageFrame{}),
	"Page.FrameResource":                                    reflect.TypeOf(PageFrameResource{}),
	"Page.FrameResourceTree":                                reflect.TypeOf(PageFrameResourceTree{}),
	"Page.FrameTree":                                        reflect.TypeOf(PageFrameTree{}),
	"Page.NavigationEntry":                                  reflect.TypeOf(PageNavigationEntry{}),
	"Page.ScreencastFrameMetadata":                          reflect.TypeOf(PageScreencastFrameMetadata{}),
	"Page.AppManifestError":                                 reflect.TypeOf(PageAppManifestError{}),
	"Page.AppManifestParsedProperties":                      reflect.TypeOf(PageAppManifestParsedProperties{}),
	"Page.LayoutViewport":                                   reflect.TypeOf(PageLayoutViewport{}),
	"Page.VisualViewport":                                   reflect.TypeOf(PageVisualViewport{}),
	"Page.Viewport":                                         reflect.TypeOf(PageViewport{}),
	"Page.FontFamilies":                                     reflect.TypeOf(PageFontFamilies{}),
	"Page.ScriptFontFamilies":                               reflect.TypeOf(PageScriptFontFamilies{}),
	"Page.FontSizes":                                        reflect.TypeOf(PageFontSizes{}),
	"Page.InstallabilityErrorArgument":                      reflect.TypeOf(PageInstallabilityErrorArgument{}),
	"Page.InstallabilityError":                              reflect.TypeOf(PageInstallabilityError{}),
	"Page.CompilationCacheParams":                           reflect.TypeOf(PageCompilationCacheParams{}),
	"Page.BackForwardCacheNotRestoredExplanation":           reflect.TypeOf(PageBackForwardCacheNotRestoredExplanation{}),
	"Page.BackForwardCacheNotRestoredExplanationTree":       reflect.TypeOf(PageBackForwardCacheNotRestoredExplanationTree{}),
	"Page.addScriptToEvaluateOnLoad":                        reflect.TypeOf(PageAddScriptToEvaluateOnLoad{}),
	"Page.addScriptToEvaluateOnLoadResult":                  reflect.TypeOf(PageAddScriptToEvaluateOnLoadResult{}),
	"Page.addScriptToEvaluateOnNewDocument":                 reflect.TypeOf(PageAddScriptToEvaluateOnNewDocument{}),
	"Page.addScriptToEvaluateOnNewDocumentResult":           reflect.TypeOf(PageAddScriptToEvaluateOnNewDocumentResult{}),
	"Page.bringToFront":                                     reflect.TypeOf(PageBringToFront{}),
	"Page.captureScreenshot":                                reflect.TypeOf(PageCaptureScreenshot{}),
	"Page.captureScreenshotResult":                          reflect.TypeOf(PageCaptureScreenshotResult{}),
	"Page.captureSnapshot":                                  reflect.TypeOf(PageCaptureSnapshot{}),
	"Page.captureSnapshotResult":                            reflect.TypeOf(PageCaptureSnapshotResult{}),
	"Page.clearDeviceMetricsOverride":                       reflect.TypeOf(PageClearDeviceMetricsOverride{}),
	"Page.clearDeviceOrientationOverride":                   reflect.TypeOf(PageClearDeviceOrientationOverride{}),
	"Page.clearGeolocationOverride":                         reflect.TypeOf(PageClearGeolocationOverride{}),
	"Page.createIsolatedWorld":                              reflect.TypeOf(PageCreateIsolatedWorld{}),
	"Page.createIsolatedWorldResult":                        reflect.TypeOf(PageCreateIsolatedWorldResult{}),
	"Page.deleteCookie":                                     reflect.TypeOf(PageDeleteCookie{}),
	"Page.disable":                                          reflect.TypeOf(PageDisable{}),
	"Page.enable":                                           reflect.TypeOf(PageEnable{}),
	"Page.getAppManifest":                                   reflect.TypeOf(PageGetAppManifest{}),
	"Page.getAppManifestResult":                             reflect.TypeOf(PageGetAppManifestResult{}),
	"Page.getInstallabilityErrors":                          reflect.TypeOf(PageGetInstallabilityErrors{}),
	"Page.getInstallabilityErrorsResult":                    reflect.TypeOf(PageGetInstallabilityErrorsResult{}),
	"Page.getManifestIcons":                                 reflect.TypeOf(PageGetManifestIcons{}),
	"Page.getManifestIconsResult":                           reflect.TypeOf(PageGetManifestIconsResult{}),
	"Page.getAppId":                                         reflect.TypeOf(PageGetAppID{}),
	"Page.getAppIdResult":                                   reflect.TypeOf(PageGetAppIDResult{}),
	"Page.getCookies":                                       reflect.TypeOf(PageGetCookies{}),
	"Page.getCookiesResult":                                 reflect.TypeOf(PageGetCookiesResult{}),
	"Page.getFrameTree":                                     reflect.TypeOf(PageGetFrameTree{}),
	"Page.getFrameTreeResult":                               reflect.TypeOf(PageGetFrameTreeResult{}),
	"Page.getLayoutMetrics":                                 reflect.TypeOf(PageGetLayoutMetrics{}),
	"Page.getLayoutMetricsResult":                           reflect.TypeOf(PageGetLayoutMetricsResult{}),
	"Page.getNavigationHistory":                             reflect.TypeOf(PageGetNavigationHistory{}),
	"Page.getNavigationHistoryResult":                       reflect.TypeOf(PageGetNavigationHistoryResult{}),
	"Page.resetNavigationHistory":                           reflect.TypeOf(PageResetNavigationHistory{}),
	"Page.getResourceContent":                               reflect.TypeOf(PageGetResourceContent{}),
	"Page.getResourceContentResult":                         reflect.TypeOf(PageGetResourceContentResult{}),
	"Page.getResourceTree":                                  reflect.TypeOf(PageGetResourceTree{}),
	"Page.getResourceTreeResult":                            reflect.TypeOf(PageGetResourceTreeResult{}),
	"Page.handleJavaScriptDialog":                           reflect.TypeOf(PageHandleJavaScriptDialog{}),
	"Page.navigate":                                         reflect.TypeOf(PageNavigate{}),
	"Page.navigateResult":                                   reflect.TypeOf(PageNavigateResult{}),
	"Page.navigateToHistoryEntry":                           reflect.TypeOf(PageNavigateToHistoryEntry{}),
	"Page.printToPDF":                                       reflect.TypeOf(PagePrintToPDF{}),
	"Page.printToPDFResult":                                 reflect.TypeOf(PagePrintToPDFResult{}),
	"Page.reload":                                           reflect.TypeOf(PageReload{}),
	"Page.removeScriptToEvaluateOnLoad":                     reflect.TypeOf(PageRemoveScriptToEvaluateOnLoad{}),
	"Page.removeScriptToEvaluateOnNewDocument":              reflect.TypeOf(PageRemoveScriptToEvaluateOnNewDocument{}),
	"Page.screencastFrameAck":                               reflect.TypeOf(PageScreencastFrameAck{}),
	"Page.searchInResource":                                 reflect.TypeOf(PageSearchInResource{}),
	"Page.searchInResourceResult":                           reflect.TypeOf(PageSearchInResourceResult{}),
	"Page.setAdBlockingEnabled":                             reflect.TypeOf(PageSetAdBlockingEnabled{}),
	"Page.setBypassCSP":                                     reflect.TypeOf(PageSetBypassCSP{}),
	"Page.getPermissionsPolicyState":                        reflect.TypeOf(PageGetPermissionsPolicyState{}),
	"Page.getPermissionsPolicyStateResult":                  reflect.TypeOf(PageGetPermissionsPolicyStateResult{}),
	"Page.getOriginTrials":                                  reflect.TypeOf(PageGetOriginTrials{}),
	"Page.getOriginTrialsResult":                            reflect.TypeOf(PageGetOriginTrialsResult{}),
	"Page.setDeviceMetricsOverride":                         reflect.TypeOf(PageSetDeviceMetricsOverride{}),
	"Page.setDeviceOrientationOverride":                     reflect.TypeOf(PageSetDeviceOrientationOverride{}),
	"Page.setFontFamilies":                                  reflect.TypeOf(PageSetFontFamilies{}),
	"Page.setFontSizes":                                     reflect.TypeOf(PageSetFontSizes{}),
	"Page.setDocumentContent":                               reflect.TypeOf(PageSetDocumentContent{}),
	"Page.setDownloadBehavior":                              reflect.TypeOf(PageSetDownloadBehavior{}),
	"Page.setGeolocationOverride":                           reflect.TypeOf(PageSetGeolocationOverride{}),
	"Page.setLifecycleEventsEnabled":                        reflect.TypeOf(PageSetLifecycleEventsEnabled{}),
	"Page.setTouchEmulationEnabled":                         reflect.TypeOf(PageSetTouchEmulationEnabled{}),
	"Page.startScreencast":                                  reflect.TypeOf(PageStartScreencast{}),
	"Page.stopLoading":                                      reflect.TypeOf(PageStopLoading{}),
	"Page.crash":                                            reflect.TypeOf(PageCrash{}),
	"Page.close":                                            reflect.TypeOf(PageClose{}),
	"Page.setWebLifecycleState":                             reflect.TypeOf(PageSetWebLifecycleState{}),
	"Page.stopScreencast":                                   reflect.TypeOf(PageStopScreencast{}),
	"Page.produceCompilationCache":                          reflect.TypeOf(PageProduceCompilationCache{}),
	"Page.addCompilationCache":                              reflect.TypeOf(PageAddCompilationCache{}),
	"Page.clearCompilationCache":                            reflect.TypeOf(PageClearCompilationCache{}),
	"Page.setSPCTransactionMode":                            reflect.TypeOf(PageSetSPCTransactionMode{}),
	"Page.generateTestReport":                               reflect.TypeOf(PageGenerateTestReport{}),
	"Page.waitForDebugger":                                  reflect.TypeOf(PageWaitForDebugger{}),
	"Page.setInterceptFileChooserDialog":                    reflect.TypeOf(PageSetInterceptFileChooserDialog{}),
	"Page.domContentEventFired":                             reflect.TypeOf(PageDomContentEventFired{}),
	"Page.fileChooserOpened":                                reflect.TypeOf(PageFileChooserOpened{}),
	"Page.frameAttached":                                    reflect.TypeOf(PageFrameAttached{}),
	"Page.frameClearedScheduledNavigation":                  reflect.TypeOf(PageFrameClearedScheduledNavigation{}),
	"Page.frameDetached":                                    reflect.TypeOf(PageFrameDetached{}),
	"Page.frameNavigated":                                   reflect.TypeOf(PageFrameNavigated{}),
	"Page.documentOpened":                                   reflect.TypeOf(PageDocumentOpened{}),
	"Page.frameResized":                                     reflect.TypeOf(PageFrameResized{}),
	"Page.frameRequestedNavigation":                         reflect.TypeOf(PageFrameRequestedNavigation{}),
	"Page.frameScheduledNavigation":                         reflect.TypeOf(PageFrameScheduledNavigation{}),
	"Page.frameStartedLoading":                              reflect.TypeOf(PageFrameStartedLoading{}),
	"Page.frameStoppedLoading":                              reflect.TypeOf(PageFrameStoppedLoading{}),
	"Page.downloadWillBegin":                                reflect.TypeOf(PageDownloadWillBegin{}),
	"Page.downloadProgress":                                 reflect.TypeOf(PageDownloadProgress{}),
	"Page.interstitialHidden":                               reflect.TypeOf(PageInterstitialHidden{}),
	"Page.interstitialShown":                                reflect.TypeOf(PageInterstitialShown{}),
	"Page.javascriptDialogClosed":                           reflect.TypeOf(PageJavascriptDialogClosed{}),
	"Page.javascriptDialogOpening":                          reflect.TypeOf(PageJavascriptDialogOpening{}),
	"Page.lifecycleEvent":                                   reflect.TypeOf(PageLifecycleEvent{}),
	"Page.backForwardCacheNotUsed":                          reflect.TypeOf(PageBackForwardCacheNotUsed{}),
	"Page.prerenderAttemptCompleted":                        reflect.TypeOf(PagePrerenderAttemptCompleted{}),
	"Page.loadEventFired":                                   reflect.TypeOf(PageLoadEventFired{}),
	"Page.navigatedWithinDocument":                          reflect.TypeOf(PageNavigatedWithinDocument{}),
	"Page.screencastFrame":                                  reflect.TypeOf(PageScreencastFrame{}),
	"Page.screencastVisibilityChanged":                      reflect.TypeOf(PageScreencastVisibilityChanged{}),
	"Page.windowOpen":                                       reflect.TypeOf(PageWindowOpen{}),
	"Page.compilationCacheProduced":                         reflect.TypeOf(PageCompilationCacheProduced{}),
	"Performance.Metric":                                    reflect.TypeOf(PerformanceMetric{}),
	"Performance.disable":                                   reflect.TypeOf(PerformanceDisable{}),
	"Performance.enable":                                    reflect.TypeOf(PerformanceEnable{}),
	"Performance.setTimeDomain":                             reflect.TypeOf(PerformanceSetTimeDomain{}),
	"Performance.getMetrics":                                reflect.TypeOf(PerformanceGetMetrics{}),
	"Performance.getMetricsResult":                          reflect.TypeOf(PerformanceGetMetricsResult{}),
	"Performance.metrics":                                   reflect.TypeOf(PerformanceMetrics{}),
	"PerformanceTimeline.LargestContentfulPaint":            reflect.TypeOf(PerformanceTimelineLargestContentfulPaint{}),
	"PerformanceTimeline.LayoutShiftAttribution":            reflect.TypeOf(PerformanceTimelineLayoutShiftAttribution{}),
	"PerformanceTimeline.LayoutShift":                       reflect.TypeOf(PerformanceTimelineLayoutShift{}),
	"PerformanceTimeline.TimelineEvent":                     reflect.TypeOf(PerformanceTimelineTimelineEvent{}),
	"PerformanceTimeline.enable":                            reflect.TypeOf(PerformanceTimelineEnable{}),
	"PerformanceTimeline.timelineEventAdded":                reflect.TypeOf(PerformanceTimelineTimelineEventAdded{}),
	"Security.CertificateSecurityState":                     reflect.TypeOf(SecurityCertificateSecurityState{}),
	"Security.SafetyTipInfo":                                reflect.TypeOf(SecuritySafetyTipInfo{}),
	"Security.VisibleSecurityState":                         reflect.TypeOf(SecurityVisibleSecurityState{}),
	"Security.SecurityStateExplanation":                     reflect.TypeOf(SecuritySecurityStateExplanation{}),
	"Security.InsecureContentStatus":                        reflect.TypeOf(SecurityInsecureContentStatus{}),
	"Security.disable":                                      reflect.TypeOf(SecurityDisable{}),
	"Security.enable":                                       reflect.TypeOf(SecurityEnable{}),
	"Security.setIgnoreCertificateErrors":                   reflect.TypeOf(SecuritySetIgnoreCertificateErrors{}),
	"Security.handleCertificateError":                       reflect.TypeOf(SecurityHandleCertificateError{}),
	"Security.setOverrideCertificateErrors":                 reflect.TypeOf(SecuritySetOverrideCertificateErrors{}),
	"Security.certificateError":                             reflect.TypeOf(SecurityCertificateError{}),
	"Security.visibleSecurityStateChanged":                  reflect.TypeOf(SecurityVisibleSecurityStateChanged{}),
	"Security.securityStateChanged":                         reflect.TypeOf(SecuritySecurityStateChanged{}),
	"ServiceWorker.ServiceWorkerRegistration":               reflect.TypeOf(ServiceWorkerServiceWorkerRegistration{}),
	"ServiceWorker.ServiceWorkerVersion":                    reflect.TypeOf(ServiceWorkerServiceWorkerVersion{}),
	"ServiceWorker.ServiceWorkerErrorMessage":               reflect.TypeOf(ServiceWorkerServiceWorkerErrorMessage{}),
	"ServiceWorker.deliverPushMessage":                      reflect.TypeOf(ServiceWorkerDeliverPushMessage{}),
	"ServiceWorker.disable":                                 reflect.TypeOf(ServiceWorkerDisable{}),
	"ServiceWorker.dispatchSyncEvent":                       reflect.TypeOf(ServiceWorkerDispatchSyncEvent{}),
	"ServiceWorker.dispatchPeriodicSyncEvent":               reflect.TypeOf(ServiceWorkerDispatchPeriodicSyncEvent{}),
	"ServiceWorker.enable":                                  reflect.TypeOf(ServiceWorkerEnable{}),
	"ServiceWorker.inspectWorker":                           reflect.TypeOf(ServiceWorkerInspectWorker{}),
	"ServiceWorker.setForceUpdateOnPageLoad":                reflect.TypeOf(ServiceWorkerSetForceUpdateOnPageLoad{}),
	"ServiceWorker.skipWaiting":                             reflect.TypeOf(ServiceWorkerSkipWaiting{}),
	"ServiceWorker.startWorker":                             reflect.TypeOf(ServiceWorkerStartWorker{}),
	"ServiceWorker.stopAllWorkers":                          reflect.TypeOf(ServiceWorkerStopAllWorkers{}),
	"ServiceWorker.stopWorker":                              reflect.TypeOf(ServiceWorkerStopWorker{}),
	"ServiceWorker.unregister":                              reflect.TypeOf(ServiceWorkerUnregister{}),
	"ServiceWorker.updateRegistration":                      reflect.TypeOf(ServiceWorkerUpdateRegistration{}),
	"ServiceWorker.workerErrorReported":                     reflect.TypeOf(ServiceWorkerWorkerErrorReported{}),
	"ServiceWorker.workerRegistrationUpdated":               reflect.TypeOf(ServiceWorkerWorkerRegistrationUpdated{}),
	"ServiceWorker.workerVersionUpdated":                    reflect.TypeOf(ServiceWorkerWorkerVersionUpdated{}),
	"Storage.UsageForType":                                  reflect.TypeOf(StorageUsageForType{}),
	"Storage.TrustTokens":                                   reflect.TypeOf(StorageTrustTokens{}),
	"Storage.InterestGroupAd":                               reflect.TypeOf(StorageInterestGroupAd{}),
	"Storage.InterestGroupDetails":                          reflect.TypeOf(StorageInterestGroupDetails{}),
	"Storage.getStorageKeyForFrame":                         reflect.TypeOf(StorageGetStorageKeyForFrame{}),
	"Storage.getStorageKeyForFrameResult":                   reflect.TypeOf(StorageGetStorageKeyForFrameResult{}),
	"Storage.clearDataForOrigin":                            reflect.TypeOf(StorageClearDataForOrigin{}),
	"Storage.clearDataForStorageKey":                        reflect.TypeOf(StorageClearDataForStorageKey{}),
	"Storage.getCookies":                                    reflect.TypeOf(StorageGetCookies{}),
	"Storage.getCookiesResult":                              reflect.TypeOf(StorageGetCookiesResult{}),
	"Storage.setCookies":                                    reflect.TypeOf(StorageSetCookies{}),
	"Storage.clearCookies":                                  reflect.TypeOf(StorageClearCookies{}),
	"Storage.getUsageAndQuota":                              reflect.TypeOf(StorageGetUsageAndQuota{}),
	"Storage.getUsageAndQuotaResult":                        reflect.TypeOf(StorageGetUsageAndQuotaResult{}),
	"Storage.overrideQuotaForOrigin":                        reflect.TypeOf(StorageOverrideQuotaForOrigin{}),
	"Storage.trackCacheStorageForOrigin":                    reflect.TypeOf(StorageTrackCacheStorageForOrigin{}),
	"Storage.trackIndexedDBForOrigin":                       reflect.TypeOf(StorageTrackIndexedDBForOrigin{}),
	"Storage.trackIndexedDBForStorageKey":                   reflect.TypeOf(StorageTrackIndexedDBForStorageKey{}),
	"Storage.untrackCacheStorageForOrigin":                  reflect.TypeOf(StorageUntrackCacheStorageForOrigin{}),
	"Storage.untrackIndexedDBForOrigin":                     reflect.TypeOf(StorageUntrackIndexedDBForOrigin{}),
	"Storage.untrackIndexedDBForStorageKey":                 reflect.TypeOf(StorageUntrackIndexedDBForStorageKey{}),
	"Storage.getTrustTokens":                                reflect.TypeOf(StorageGetTrustTokens{}),
	"Storage.getTrustTokensResult":                          reflect.TypeOf(StorageGetTrustTokensResult{}),
	"Storage.clearTrustTokens":                              reflect.TypeOf(StorageClearTrustTokens{}),
	"Storage.clearTrustTokensResult":                        reflect.TypeOf(StorageClearTrustTokensResult{}),
	"Storage.getInterestGroupDetails":                       reflect.TypeOf(StorageGetInterestGroupDetails{}),
	"Storage.getInterestGroupDetailsResult":                 reflect.TypeOf(StorageGetInterestGroupDetailsResult{}),
	"Storage.setInterestGroupTracking":                      reflect.TypeOf(StorageSetInterestGroupTracking{}),
	"Storage.cacheStorageContentUpdated":                    reflect.TypeOf(StorageCacheStorageContentUpdated{}),
	"Storage.cacheStorageListUpdated":                       reflect.TypeOf(StorageCacheStorageListUpdated{}),
	"Storage.indexedDBContentUpdated":                       reflect.TypeOf(StorageIndexedDBContentUpdated{}),
	"Storage.indexedDBListUpdated":                          reflect.TypeOf(StorageIndexedDBListUpdated{}),
	"Storage.interestGroupAccessed":                         reflect.TypeOf(StorageInterestGroupAccessed{}),
	"SystemInfo.GPUDevice":                                  reflect.TypeOf(SystemInfoGPUDevice{}),
	"SystemInfo.Size":                                       reflect.TypeOf(SystemInfoSize{}),
	"SystemInfo.VideoDecodeAcceleratorCapability":           reflect.TypeOf(SystemInfoVideoDecodeAcceleratorCapability{}),
	"SystemInfo.VideoEncodeAcceleratorCapability":           reflect.TypeOf(SystemInfoVideoEncodeAcceleratorCapability{}),
	"SystemInfo.ImageDecodeAcceleratorCapability":           reflect.TypeOf(SystemInfoImageDecodeAcceleratorCapability{}),
	"SystemInfo.GPUInfo":                                    reflect.TypeOf(SystemInfoGPUInfo{}),
	"SystemInfo.ProcessInfo":                                reflect.TypeOf(SystemInfoProcessInfo{}),
	"SystemInfo.getInfo":                                    reflect.TypeOf(SystemInfoGetInfo{}),
	"SystemInfo.getInfoResult":                              reflect.TypeOf(SystemInfoGetInfoResult{}),
	"SystemInfo.getProcessInfo":                             reflect.TypeOf(SystemInfoGetProcessInfo{}),
	"SystemInfo.getProcessInfoResult":                       reflect.TypeOf(SystemInfoGetProcessInfoResult{}),
	"Target.TargetInfo":                                     reflect.TypeOf(TargetTargetInfo{}),
	"Target.FilterEntry":                                    reflect.TypeOf(TargetFilterEntry{}),
	"Target.RemoteLocation":                                 reflect.TypeOf(TargetRemoteLocation{}),
	"Target.activateTarget":                                 reflect.TypeOf(TargetActivateTarget{}),
	"Target.attachToTarget":                                 reflect.TypeOf(TargetAttachToTarget{}),
	"Target.attachToTargetResult":                           reflect.TypeOf(TargetAttachToTargetResult{}),
	"Target.attachToBrowserTarget":                          reflect.TypeOf(TargetAttachToBrowserTarget{}),
	"Target.attachToBrowserTargetResult":                    reflect.TypeOf(TargetAttachToBrowserTargetResult{}),
	"Target.closeTarget":                                    reflect.TypeOf(TargetCloseTarget{}),
	"Target.closeTargetResult":                              reflect.TypeOf(TargetCloseTargetResult{}),
	"Target.exposeDevToolsProtocol":                         reflect.TypeOf(TargetExposeDevToolsProtocol{}),
	"Target.createBrowserContext":                           reflect.TypeOf(TargetCreateBrowserContext{}),
	"Target.createBrowserContextResult":                     reflect.TypeOf(TargetCreateBrowserContextResult{}),
	"Target.getBrowserContexts":                             reflect.TypeOf(TargetGetBrowserContexts{}),
	"Target.getBrowserContextsResult":                       reflect.TypeOf(TargetGetBrowserContextsResult{}),
	"Target.createTarget":                                   reflect.TypeOf(TargetCreateTarget{}),
	"Target.createTargetResult":                             reflect.TypeOf(TargetCreateTargetResult{}),
	"Target.detachFromTarget":                               reflect.TypeOf(TargetDetachFromTarget{}),
	"Target.disposeBrowserContext":                          reflect.TypeOf(TargetDisposeBrowserContext{}),
	"Target.getTargetInfo":                                  reflect.TypeOf(TargetGetTargetInfo{}),
	"Target.getTargetInfoResult":                            reflect.TypeOf(TargetGetTargetInfoResult{}),
	"Target.getTargets":                                     reflect.TypeOf(TargetGetTargets{}),
	"Target.getTargetsResult":                               reflect.TypeOf(TargetGetTargetsResult{}),
	"Target.sendMessageToTarget":                            reflect.TypeOf(TargetSendMessageToTarget{}),
	"Target.setAutoAttach":                                  reflect.TypeOf(TargetSetAutoAttach{}),
	"Target.autoAttachRelated":                              reflect.TypeOf(TargetAutoAttachRelated{}),
	"Target.setDiscoverTargets":                             reflect.TypeOf(TargetSetDiscoverTargets{}),
	"Target.setRemoteLocations":                             reflect.TypeOf(TargetSetRemoteLocations{}),
	"Target.attachedToTarget":                               reflect.TypeOf(TargetAttachedToTarget{}),
	"Target.detachedFromTarget":                             reflect.TypeOf(TargetDetachedFromTarget{}),
	"Target.receivedMessageFromTarget":                      reflect.TypeOf(TargetReceivedMessageFromTarget{}),
	"Target.targetCreated":                                  reflect.TypeOf(TargetTargetCreated{}),
	"Target.targetDestroyed":                                reflect.TypeOf(TargetTargetDestroyed{}),
	"Target.targetCrashed":                                  reflect.TypeOf(TargetTargetCrashed{}),
	"Target.targetInfoChanged":                              reflect.TypeOf(TargetTargetInfoChanged{}),
	"Tethering.bind":                                        reflect.TypeOf(TetheringBind{}),
	"Tethering.unbind":                                      reflect.TypeOf(TetheringUnbind{}),
	"Tethering.accepted":                                    reflect.TypeOf(TetheringAccepted{}),
	"Tracing.TraceConfig":                                   reflect.TypeOf(TracingTraceConfig{}),
	"Tracing.end":                                           reflect.TypeOf(TracingEnd{}),
	"Tracing.getCategories":                                 reflect.TypeOf(TracingGetCategories{}),
	"Tracing.getCategoriesResult":                           reflect.TypeOf(TracingGetCategoriesResult{}),
	"Tracing.recordClockSyncMarker":                         reflect.TypeOf(TracingRecordClockSyncMarker{}),
	"Tracing.requestMemoryDump":                             reflect.TypeOf(TracingRequestMemoryDump{}),
	"Tracing.requestMemoryDumpResult":                       reflect.TypeOf(TracingRequestMemoryDumpResult{}),
	"Tracing.start":                                         reflect.TypeOf(TracingStart{}),
	"Tracing.bufferUsage":                                   reflect.TypeOf(TracingBufferUsage{}),
	"Tracing.dataCollected":                                 reflect.TypeOf(TracingDataCollected{}),
	"Tracing.tracingComplete":                               reflect.TypeOf(TracingTracingComplete{}),
	"Fetch.RequestPattern":                                  reflect.TypeOf(FetchRequestPattern{}),
	"Fetch.HeaderEntry":                                     reflect.TypeOf(FetchHeaderEntry{}),
	"Fetch.AuthChallenge":                                   reflect.TypeOf(FetchAuthChallenge{}),
	"Fetch.AuthChallengeResponse":                           reflect.TypeOf(FetchAuthChallengeResponse{}),
	"Fetch.disable":                                         reflect.TypeOf(FetchDisable{}),
	"Fetch.enable":                                          reflect.TypeOf(FetchEnable{}),
	"Fetch.failRequest":                                     reflect.TypeOf(FetchFailRequest{}),
	"Fetch.fulfillRequest":                                  reflect.TypeOf(FetchFulfillRequest{}),
	"Fetch.continueRequest":                                 reflect.TypeOf(FetchContinueRequest{}),
	"Fetch.continueWithAuth":                                reflect.TypeOf(FetchContinueWithAuth{}),
	"Fetch.continueResponse":                                reflect.TypeOf(FetchContinueResponse{}),
	"Fetch.getResponseBody":                                 reflect.TypeOf(FetchGetResponseBody{}),
	"Fetch.getResponseBodyResult":                           reflect.TypeOf(FetchGetResponseBodyResult{}),
	"Fetch.takeResponseBodyAsStream":                        reflect.TypeOf(FetchTakeResponseBodyAsStream{}),
	"Fetch.takeResponseBodyAsStreamResult":                  reflect.TypeOf(FetchTakeResponseBodyAsStreamResult{}),
	"Fetch.requestPaused":                                   reflect.TypeOf(FetchRequestPaused{}),
	"Fetch.authRequired":                                    reflect.TypeOf(FetchAuthRequired{}),
	"WebAudio.ContextRealtimeData":                          reflect.TypeOf(WebAudioContextRealtimeData{}),
	"WebAudio.BaseAudioContext":                             reflect.TypeOf(WebAudioBaseAudioContext{}),
	"WebAudio.AudioListener":                                reflect.TypeOf(WebAudioAudioListener{}),
	"WebAudio.AudioNode":                                    reflect.TypeOf(WebAudioAudioNode{}),
	"WebAudio.AudioParam":                                   reflect.TypeOf(WebAudioAudioParam{}),
	"WebAudio.enable":                                       reflect.TypeOf(WebAudioEnable{}),
	"WebAudio.disable":                                      reflect.TypeOf(WebAudioDisable{}),
	"WebAudio.getRealtimeData":                              reflect.TypeOf(WebAudioGetRealtimeData{}),
	"WebAudio.getRealtimeDataResult":                        reflect.TypeOf(WebAudioGetRealtimeDataResult{}),
	"WebAudio.contextCreated":                               reflect.TypeOf(WebAudioContextCreated{}),
	"WebAudio.contextWillBeDestroyed":                       reflect.TypeOf(WebAudioContextWillBeDestroyed{}),
	"WebAudio.contextChanged":                               reflect.TypeOf(WebAudioContextChanged{}),
	"WebAudio.audioListenerCreated":                         reflect.TypeOf(WebAudioAudioListenerCreated{}),
	"WebAudio.audioListenerWillBeDestroyed":                 reflect.TypeOf(WebAudioAudioListenerWillBeDestroyed{}),
	"WebAudio.audioNodeCreated":                             reflect.TypeOf(WebAudioAudioNodeCreated{}),
	"WebAudio.audioNodeWillBeDestroyed":                     reflect.TypeOf(WebAudioAudioNodeWillBeDestroyed{}),
	"WebAudio.audioParamCreated":                            reflect.TypeOf(WebAudioAudioParamCreated{}),
	"WebAudio.audioParamWillBeDestroyed":                    reflect.TypeOf(WebAudioAudioParamWillBeDestroyed{}),
	"WebAudio.nodesConnected":                               reflect.TypeOf(WebAudioNodesConnected{}),
	"WebAudio.nodesDisconnected":                            reflect.TypeOf(WebAudioNodesDisconnected{}),
	"WebAudio.nodeParamConnected":                           reflect.TypeOf(WebAudioNodeParamConnected{}),
	"WebAudio.nodeParamDisconnected":                        reflect.TypeOf(WebAudioNodeParamDisconnected{}),
	"WebAuthn.VirtualAuthenticatorOptions":                  reflect.TypeOf(WebAuthnVirtualAuthenticatorOptions{}),
	"WebAuthn.Credential":                                   reflect.TypeOf(WebAuthnCredential{}),
	"WebAuthn.enable":                                       reflect.TypeOf(WebAuthnEnable{}),
	"WebAuthn.disable":                                      reflect.TypeOf(WebAuthnDisable{}),
	"WebAuthn.addVirtualAuthenticator":                      reflect.TypeOf(WebAuthnAddVirtualAuthenticator{}),
	"WebAuthn.addVirtualAuthenticatorResult":                reflect.TypeOf(WebAuthnAddVirtualAuthenticatorResult{}),
	"WebAuthn.removeVirtualAuthenticator":                   reflect.TypeOf(WebAuthnRemoveVirtualAuthenticator{}),
	"WebAuthn.addCredential":                                reflect.TypeOf(WebAuthnAddCredential{}),
	"WebAuthn.getCredential":                                reflect.TypeOf(WebAuthnGetCredential{}),
	"WebAuthn.getCredentialResult":                          reflect.TypeOf(WebAuthnGetCredentialResult{}),
	"WebAuthn.getCredentials":                               reflect.TypeOf(WebAuthnGetCredentials{}),
	"WebAuthn.getCredentialsResult":                         reflect.TypeOf(WebAuthnGetCredentialsResult{}),
	"WebAuthn.removeCredential":                             reflect.TypeOf(WebAuthnRemoveCredential{}),
	"WebAuthn.clearCredentials":                             reflect.TypeOf(WebAuthnClearCredentials{}),
	"WebAuthn.setUserVerified":                              reflect.TypeOf(WebAuthnSetUserVerified{}),
	"WebAuthn.setAutomaticPresenceSimulation":               reflect.TypeOf(WebAuthnSetAutomaticPresenceSimulation{}),
	"Media.PlayerMessage":                                   reflect.TypeOf(MediaPlayerMessage{}),
	"Media.PlayerProperty":                                  reflect.TypeOf(MediaPlayerProperty{}),
	"Media.PlayerEvent":                                     reflect.TypeOf(MediaPlayerEvent{}),
	"Media.PlayerErrorSourceLocation":                       reflect.TypeOf(MediaPlayerErrorSourceLocation{}),
	"Media.PlayerError":                                     reflect.TypeOf(MediaPlayerError{}),
	"Media.enable":                                          reflect.TypeOf(MediaEnable{}),
	"Media.disable":                                         reflect.TypeOf(MediaDisable{}),
	"Media.playerPropertiesChanged":                         reflect.TypeOf(MediaPlayerPropertiesChanged{}),
	"Media.playerEventsAdded":                               reflect.TypeOf(MediaPlayerEventsAdded{}),
	"Media.playerMessagesLogged":                            reflect.TypeOf(MediaPlayerMessagesLogged{}),
	"Media.playerErrorsRaised":                              reflect.TypeOf(MediaPlayerErrorsRaised{}),
	"Media.playersCreated":                                  reflect.TypeOf(MediaPlayersCreated{}),
	"Console.ConsoleMessage":                                reflect.TypeOf(ConsoleConsoleMessage{}),
	"Console.clearMessages":                                 reflect.TypeOf(ConsoleClearMessages{}),
	"Console.disable":                                       reflect.TypeOf(ConsoleDisable{}),
	"Console.enable":                                        reflect.TypeOf(ConsoleEnable{}),
	"Console.messageAdded":                                  reflect.TypeOf(ConsoleMessageAdded{}),
	"Debugger.Location":                                     reflect.TypeOf(DebuggerLocation{}),
	"Debugger.ScriptPosition":                               reflect.TypeOf(DebuggerScriptPosition{}),
	"Debugger.LocationRange":                                reflect.TypeOf(DebuggerLocationRange{}),
	"Debugger.CallFrame":                                    reflect.TypeOf(DebuggerCallFrame{}),
	"Debugger.Scope":                                        reflect.TypeOf(DebuggerScope{}),
	"Debugger.SearchMatch":                                  reflect.TypeOf(DebuggerSearchMatch{}),
	"Debugger.BreakLocation":                                reflect.TypeOf(DebuggerBreakLocation{}),
	"Debugger.WasmDisassemblyChunk":                         reflect.TypeOf(DebuggerWasmDisassemblyChunk{}),
	"Debugger.DebugSymbols":                                 reflect.TypeOf(DebuggerDebugSymbols{}),
	"Debugger.continueToLocation":                           reflect.TypeOf(DebuggerContinueToLocation{}),
	"Debugger.disable":                                      reflect.TypeOf(DebuggerDisable{}),
	"Debugger.enable":                                       reflect.TypeOf(DebuggerEnable{}),
	"Debugger.enableResult":                                 reflect.TypeOf(DebuggerEnableResult{}),
	"Debugger.evaluateOnCallFrame":                          reflect.TypeOf(DebuggerEvaluateOnCallFrame{}),
	"Debugger.evaluateOnCallFrameResult":                    reflect.TypeOf(DebuggerEvaluateOnCallFrameResult{}),
	"Debugger.getPossibleBreakpoints":                       reflect.TypeOf(DebuggerGetPossibleBreakpoints{}),
	"Debugger.getPossibleBreakpointsResult":                 reflect.TypeOf(DebuggerGetPossibleBreakpointsResult{}),
	"Debugger.getScriptSource":                              reflect.TypeOf(DebuggerGetScriptSource{}),
	"Debugger.getScriptSourceResult":                        reflect.TypeOf(DebuggerGetScriptSourceResult{}),
	"Debugger.disassembleWasmModule":                        reflect.TypeOf(DebuggerDisassembleWasmModule{}),
	"Debugger.disassembleWasmModuleResult":                  reflect.TypeOf(DebuggerDisassembleWasmModuleResult{}),
	"Debugger.nextWasmDisassemblyChunk":                     reflect.TypeOf(DebuggerNextWasmDisassemblyChunk{}),
	"Debugger.nextWasmDisassemblyChunkResult":               reflect.TypeOf(DebuggerNextWasmDisassemblyChunkResult{}),
	"Debugger.getWasmBytecode":                              reflect.TypeOf(DebuggerGetWasmBytecode{}),
	"Debugger.getWasmBytecodeResult":                        reflect.TypeOf(DebuggerGetWasmBytecodeResult{}),
	"Debugger.getStackTrace":                                reflect.TypeOf(DebuggerGetStackTrace{}),
	"Debugger.getStackTraceResult":                          reflect.TypeOf(DebuggerGetStackTraceResult{}),
	"Debugger.pause":                                        reflect.TypeOf(DebuggerPause{}),
	"Debugger.pauseOnAsyncCall":                             reflect.TypeOf(DebuggerPauseOnAsyncCall{}),
	"Debugger.removeBreakpoint":                             reflect.TypeOf(DebuggerRemoveBreakpoint{}),
	"Debugger.restartFrame":                                 reflect.TypeOf(DebuggerRestartFrame{}),
	"Debugger.restartFrameResult":                           reflect.TypeOf(DebuggerRestartFrameResult{}),
	"Debugger.resume":                                       reflect.TypeOf(DebuggerResume{}),
	"Debugger.searchInContent":                              reflect.TypeOf(DebuggerSearchInContent{}),
	"Debugger.searchInContentResult":                        reflect.TypeOf(DebuggerSearchInContentResult{}),
	"Debugger.setAsyncCallStackDepth":                       reflect.TypeOf(DebuggerSetAsyncCallStackDepth{}),
	"Debugger.setBlackboxPatterns":                          reflect.TypeOf(DebuggerSetBlackboxPatterns{}),
	"Debugger.setBlackboxedRanges":                          reflect.TypeOf(DebuggerSetBlackboxedRanges{}),
	"Debugger.setBreakpoint":                                reflect.TypeOf(DebuggerSetBreakpoint{}),
	"Debugger.setBreakpointResult":                          reflect.TypeOf(DebuggerSetBreakpointResult{}),
	"Debugger.setInstrumentationBreakpoint":                 reflect.TypeOf(DebuggerSetInstrumentationBreakpoint{}),
	"Debugger.setInstrumentationBreakpointResult":           reflect.TypeOf(DebuggerSetInstrumentationBreakpointResult{}),
	"Debugger.setBreakpointByUrl":                           reflect.TypeOf(DebuggerSetBreakpointByURL{}),
	"Debugger.setBreakpointByUrlResult":                     reflect.TypeOf(DebuggerSetBreakpointByURLResult{}),
	"Debugger.setBreakpointOnFunctionCall":                  reflect.TypeOf(DebuggerSetBreakpointOnFunctionCall{}),
	"Debugger.setBreakpointOnFunctionCallResult":            reflect.TypeOf(DebuggerSetBreakpointOnFunctionCallResult{}),
	"Debugger.setBreakpointsActive":                         reflect.TypeOf(DebuggerSetBreakpointsActive{}),
	"Debugger.setPauseOnExceptions":                         reflect.TypeOf(DebuggerSetPauseOnExceptions{}),
	"Debugger.setReturnValue":                               reflect.TypeOf(DebuggerSetReturnValue{}),
	"Debugger.setScriptSource":                              reflect.TypeOf(DebuggerSetScriptSource{}),
	"Debugger.setScriptSourceResult":                        reflect.TypeOf(DebuggerSetScriptSourceResult{}),
	"Debugger.setSkipAllPauses":                             reflect.TypeOf(DebuggerSetSkipAllPauses{}),
	"Debugger.setVariableValue":                             reflect.TypeOf(DebuggerSetVariableValue{}),
	"Debugger.stepInto":                                     reflect.TypeOf(DebuggerStepInto{}),
	"Debugger.stepOut":                                      reflect.TypeOf(DebuggerStepOut{}),
	"Debugger.stepOver":                                     reflect.TypeOf(DebuggerStepOver{}),
	"Debugger.breakpointResolved":                           reflect.TypeOf(DebuggerBreakpointResolved{}),
	"Debugger.paused":                                       reflect.TypeOf(DebuggerPaused{}),
	"Debugger.resumed":                                      reflect.TypeOf(DebuggerResumed{}),
	"Debugger.scriptFailedToParse":                          reflect.TypeOf(DebuggerScriptFailedToParse{}),
	"Debugger.scriptParsed":                                 reflect.TypeOf(DebuggerScriptParsed{}),
	"HeapProfiler.SamplingHeapProfileNode":                  reflect.TypeOf(HeapProfilerSamplingHeapProfileNode{}),
	"HeapProfiler.SamplingHeapProfileSample":                reflect.TypeOf(HeapProfilerSamplingHeapProfileSample{}),
	"HeapProfiler.SamplingHeapProfile":                      reflect.TypeOf(HeapProfilerSamplingHeapProfile{}),
	"HeapProfiler.addInspectedHeapObject":                   reflect.TypeOf(HeapProfilerAddInspectedHeapObject{}),
	"HeapProfiler.collectGarbage":                           reflect.TypeOf(HeapProfilerCollectGarbage{}),
	"HeapProfiler.disable":                                  reflect.TypeOf(HeapProfilerDisable{}),
	"HeapProfiler.enable":                                   reflect.TypeOf(HeapProfilerEnable{}),
	"HeapProfiler.getHeapObjectId":                          reflect.TypeOf(HeapProfilerGetHeapObjectID{}),
	"HeapProfiler.getHeapObjectIdResult":                    reflect.TypeOf(HeapProfilerGetHeapObjectIDResult{}),
	"HeapProfiler.getObjectByHeapObjectId":                  reflect.TypeOf(HeapProfilerGetObjectByHeapObjectID{}),
	"HeapProfiler.getObjectByHeapObjectIdResult":            reflect.TypeOf(HeapProfilerGetObjectByHeapObjectIDResult{}),
	"HeapProfiler.getSamplingProfile":                       reflect.TypeOf(HeapProfilerGetSamplingProfile{}),
	"HeapProfiler.getSamplingProfileResult":                 reflect.TypeOf(HeapProfilerGetSamplingProfileResult{}),
	"HeapProfiler.startSampling":                            reflect.TypeOf(HeapProfilerStartSampling{}),
	"HeapProfiler.startTrackingHeapObjects":                 reflect.TypeOf(HeapProfilerStartTrackingHeapObjects{}),
	"HeapProfiler.stopSampling":                             reflect.TypeOf(HeapProfilerStopSampling{}),
	"HeapProfiler.stopSamplingResult":                       reflect.TypeOf(HeapProfilerStopSamplingResult{}),
	"HeapProfiler.stopTrackingHeapObjects":                  reflect.TypeOf(HeapProfilerStopTrackingHeapObjects{}),
	"HeapProfiler.takeHeapSnapshot":                         reflect.TypeOf(HeapProfilerTakeHeapSnapshot{}),
	"HeapProfiler.addHeapSnapshotChunk":                     reflect.TypeOf(HeapProfilerAddHeapSnapshotChunk{}),
	"HeapProfiler.heapStatsUpdate":                          reflect.TypeOf(HeapProfilerHeapStatsUpdate{}),
	"HeapProfiler.lastSeenObjectId":                         reflect.TypeOf(HeapProfilerLastSeenObjectID{}),
	"HeapProfiler.reportHeapSnapshotProgress":               reflect.TypeOf(HeapProfilerReportHeapSnapshotProgress{}),
	"HeapProfiler.resetProfiles":                            reflect.TypeOf(HeapProfilerResetProfiles{}),
	"Profiler.ProfileNode":                                  reflect.TypeOf(ProfilerProfileNode{}),
	"Profiler.Profile":                                      reflect.TypeOf(ProfilerProfile{}),
	"Profiler.PositionTickInfo":                             reflect.TypeOf(ProfilerPositionTickInfo{}),
	"Profiler.CoverageRange":                                reflect.TypeOf(ProfilerCoverageRange{}),
	"Profiler.FunctionCoverage":                             reflect.TypeOf(ProfilerFunctionCoverage{}),
	"Profiler.ScriptCoverage":                               reflect.TypeOf(ProfilerScriptCoverage{}),
	"Profiler.TypeObject":                                   reflect.TypeOf(ProfilerTypeObject{}),
	"Profiler.TypeProfileEntry":                             reflect.TypeOf(ProfilerTypeProfileEntry{}),
	"Profiler.ScriptTypeProfile":                            reflect.TypeOf(ProfilerScriptTypeProfile{}),
	"Profiler.disable":                                      reflect.TypeOf(ProfilerDisable{}),
	"Profiler.enable":                                       reflect.TypeOf(ProfilerEnable{}),
	"Profiler.getBestEffortCoverage":                        reflect.TypeOf(ProfilerGetBestEffortCoverage{}),
	"Profiler.getBestEffortCoverageResult":                  reflect.TypeOf(ProfilerGetBestEffortCoverageResult{}),
	"Profiler.setSamplingInterval":                          reflect.TypeOf(ProfilerSetSamplingInterval{}),
	"Profiler.start":                                        reflect.TypeOf(ProfilerStart{}),
	"Profiler.startPreciseCoverage":                         reflect.TypeOf(ProfilerStartPreciseCoverage{}),
	"Profiler.startPreciseCoverageResult":                   reflect.TypeOf(ProfilerStartPreciseCoverageResult{}),
	"Profiler.startTypeProfile":                             reflect.TypeOf(ProfilerStartTypeProfile{}),
	"Profiler.stop":                                         reflect.TypeOf(ProfilerStop{}),
	"Profiler.stopResult":                                   reflect.TypeOf(ProfilerStopResult{}),
	"Profiler.stopPreciseCoverage":                          reflect.TypeOf(ProfilerStopPreciseCoverage{}),
	"Profiler.stopTypeProfile":                              reflect.TypeOf(ProfilerStopTypeProfile{}),
	"Profiler.takePreciseCoverage":                          reflect.TypeOf(ProfilerTakePreciseCoverage{}),
	"Profiler.takePreciseCoverageResult":                    reflect.TypeOf(ProfilerTakePreciseCoverageResult{}),
	"Profiler.takeTypeProfile":                              reflect.TypeOf(ProfilerTakeTypeProfile{}),
	"Profiler.takeTypeProfileResult":                        reflect.TypeOf(ProfilerTakeTypeProfileResult{}),
	"Profiler.consoleProfileFinished":                       reflect.TypeOf(ProfilerConsoleProfileFinished{}),
	"Profiler.consoleProfileStarted":                        reflect.TypeOf(ProfilerConsoleProfileStarted{}),
	"Profiler.preciseCoverageDeltaUpdate":                   reflect.TypeOf(ProfilerPreciseCoverageDeltaUpdate{}),
	"Runtime.WebDriverValue":                                reflect.TypeOf(RuntimeWebDriverValue{}),
	"Runtime.RemoteObject":                                  reflect.TypeOf(RuntimeRemoteObject{}),
	"Runtime.CustomPreview":                                 reflect.TypeOf(RuntimeCustomPreview{}),
	"Runtime.ObjectPreview":                                 reflect.TypeOf(RuntimeObjectPreview{}),
	"Runtime.PropertyPreview":                               reflect.TypeOf(RuntimePropertyPreview{}),
	"Runtime.EntryPreview":                                  reflect.TypeOf(RuntimeEntryPreview{}),
	"Runtime.PropertyDescriptor":                            reflect.TypeOf(RuntimePropertyDescriptor{}),
	"Runtime.InternalPropertyDescriptor":                    reflect.TypeOf(RuntimeInternalPropertyDescriptor{}),
	"Runtime.PrivatePropertyDescriptor":                     reflect.TypeOf(RuntimePrivatePropertyDescriptor{}),
	"Runtime.CallArgument":                                  reflect.TypeOf(RuntimeCallArgument{}),
	"Runtime.ExecutionContextDescription":                   reflect.TypeOf(RuntimeExecutionContextDescription{}),
	"Runtime.ExceptionDetails":                              reflect.TypeOf(RuntimeExceptionDetails{}),
	"Runtime.CallFrame":                                     reflect.TypeOf(RuntimeCallFrame{}),
	"Runtime.StackTrace":                                    reflect.TypeOf(RuntimeStackTrace{}),
	"Runtime.StackTraceId":                                  reflect.TypeOf(RuntimeStackTraceID{}),
	"Runtime.awaitPromise":                                  reflect.TypeOf(RuntimeAwaitPromise{}),
	"Runtime.awaitPromiseResult":                            reflect.TypeOf(RuntimeAwaitPromiseResult{}),
	"Runtime.callFunctionOn":                                reflect.TypeOf(RuntimeCallFunctionOn{}),
	"Runtime.callFunctionOnResult":                          reflect.TypeOf(RuntimeCallFunctionOnResult{}),
	"Runtime.compileScript":                                 reflect.TypeOf(RuntimeCompileScript{}),
	"Runtime.compileScriptResult":                           reflect.TypeOf(RuntimeCompileScriptResult{}),
	"Runtime.disable":                                       reflect.TypeOf(RuntimeDisable{}),
	"Runtime.discardConsoleEntries":                         reflect.TypeOf(RuntimeDiscardConsoleEntries{}),
	"Runtime.enable":                                        reflect.TypeOf(RuntimeEnable{}),
	"Runtime.evaluate":                                      reflect.TypeOf(RuntimeEvaluate{}),
	"Runtime.evaluateResult":                                reflect.TypeOf(RuntimeEvaluateResult{}),
	"Runtime.getIsolateId":                                  reflect.TypeOf(RuntimeGetIsolateID{}),
	"Runtime.getIsolateIdResult":                            reflect.TypeOf(RuntimeGetIsolateIDResult{}),
	"Runtime.getHeapUsage":                                  reflect.TypeOf(RuntimeGetHeapUsage{}),
	"Runtime.getHeapUsageResult":                            reflect.TypeOf(RuntimeGetHeapUsageResult{}),
	"Runtime.getProperties":                                 reflect.TypeOf(RuntimeGetProperties{}),
	"Runtime.getPropertiesResult":                           reflect.TypeOf(RuntimeGetPropertiesResult{}),
	"Runtime.globalLexicalScopeNames":                       reflect.TypeOf(RuntimeGlobalLexicalScopeNames{}),
	"Runtime.globalLexicalScopeNamesResult":                 reflect.TypeOf(RuntimeGlobalLexicalScopeNamesResult{}),
	"Runtime.queryObjects":                                  reflect.TypeOf(RuntimeQueryObjects{}),
	"Runtime.queryObjectsResult":                            reflect.TypeOf(RuntimeQueryObjectsResult{}),
	"Runtime.releaseObject":                                 reflect.TypeOf(RuntimeReleaseObject{}),
	"Runtime.releaseObjectGroup":                            reflect.TypeOf(RuntimeReleaseObjectGroup{}),
	"Runtime.runIfWaitingForDebugger":                       reflect.TypeOf(RuntimeRunIfWaitingForDebugger{}),
	"Runtime.runScript":                                     reflect.TypeOf(RuntimeRunScript{}),
	"Runtime.runScriptResult":                               reflect.TypeOf(RuntimeRunScriptResult{}),
	"Runtime.setAsyncCallStackDepth":                        reflect.TypeOf(RuntimeSetAsyncCallStackDepth{}),
	"Runtime.setCustomObjectFormatterEnabled":               reflect.TypeOf(RuntimeSetCustomObjectFormatterEnabled{}),
	"Runtime.setMaxCallStackSizeToCapture":                  reflect.TypeOf(RuntimeSetMaxCallStackSizeToCapture{}),
	"Runtime.terminateExecution":                            reflect.TypeOf(RuntimeTerminateExecution{}),
	"Runtime.addBinding":                                    reflect.TypeOf(RuntimeAddBinding{}),
	"Runtime.removeBinding":                                 reflect.TypeOf(RuntimeRemoveBinding{}),
	"Runtime.getExceptionDetails":                           reflect.TypeOf(RuntimeGetExceptionDetails{}),
	"Runtime.getExceptionDetailsResult":                     reflect.TypeOf(RuntimeGetExceptionDetailsResult{}),
	"Runtime.bindingCalled":                                 reflect.TypeOf(RuntimeBindingCalled{}),
	"Runtime.consoleAPICalled":                              reflect.TypeOf(RuntimeConsoleAPICalled{}),
	"Runtime.exceptionRevoked":                              reflect.TypeOf(RuntimeExceptionRevoked{}),
	"Runtime.exceptionThrown":                               reflect.TypeOf(RuntimeExceptionThrown{}),
	"Runtime.executionContextCreated":                       reflect.TypeOf(RuntimeExecutionContextCreated{}),
	"Runtime.executionContextDestroyed":                     reflect.TypeOf(RuntimeExecutionContextDestroyed{}),
	"Runtime.executionContextsCleared":                      reflect.TypeOf(RuntimeExecutionContextsCleared{}),
	"Runtime.inspectRequested":                              reflect.TypeOf(RuntimeInspectRequested{}),
	"Schema.Domain":                                         reflect.TypeOf(SchemaDomain{}),
	"Schema.getDomains":                                     reflect.TypeOf(SchemaGetDomains{}),
	"Schema.getDomainsResult":                               reflect.TypeOf(SchemaGetDomainsResult{}),
}
